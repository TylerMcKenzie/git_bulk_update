<?php
/**
 * Generated by Haxe 3.4.7
 */

use \php\Boot;

final /**
 * The Date class provides a basic structure for date and time related
 * information. Date instances can be created by
 * - `new Date()` for a specific date,
 * - `Date.now()` to obtain information about the current time,
 * - `Date.fromTime()` with a given timestamp or
 * - `Date.fromString()` by parsing from a String.
 * There are some extra functions available in the `DateTools` class.
 * In the context of Haxe dates, a timestamp is defined as the number of
 * milliseconds elapsed since 1st January 1970.
 */
class Date {
	/**
	 * @var float
	 */
	public $__t;


	/**
	 * Returns a Date from timestamp `t`.
	 * 
	 * @param float $t
	 * 
	 * @return Date
	 */
	static public function fromTime ($t) {
		#/usr/share/haxe/std/php7/_std/Date.hx:86: characters 2-40
		$d = new Date(2000, 1, 1, 0, 0, 0);
		#/usr/share/haxe/std/php7/_std/Date.hx:87: characters 2-18
		$d->__t = $t / 1000;
		#/usr/share/haxe/std/php7/_std/Date.hx:88: characters 2-10
		return $d;
	}


	/**
	 * Creates a new date object from the given arguments.
	 * The behaviour of a Date instance is only consistent across platforms if
	 * the the arguments describe a valid date.
	 * - month: 0 to 11
	 * - day: 1 to 31
	 * - hour: 0 to 23
	 * - min: 0 to 59
	 * - sec: 0 to 59
	 * 
	 * @param int $year
	 * @param int $month
	 * @param int $day
	 * @param int $hour
	 * @param int $min
	 * @param int $sec
	 * 
	 * @return void
	 */
	public function __construct ($year, $month, $day, $hour, $min, $sec) {
		#/usr/share/haxe/std/php7/_std/Date.hx:31: characters 2-52
		$this->__t = mktime($hour, $min, $sec, $month + 1, $day, $year);
	}


	/**
	 * Returns the timestamp (in milliseconds) of the date. It might
	 * only have a per-second precision depending on the platforms.
	 * 
	 * @return float
	 */
	public function getTime () {
		#/usr/share/haxe/std/php7/_std/Date.hx:35: characters 2-21
		return $this->__t * 1000.0;
	}
}


Boot::registerClass(Date::class, 'Date');

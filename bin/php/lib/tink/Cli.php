<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink;

use \php\Boot;
use \tink\core\Outcome as CoreOutcome;

class Cli {
	/**
	 * @param CoreOutcome $result
	 * 
	 * @return void
	 */
	static public function exit ($result) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:29: lines 29-35
		switch (Boot::dynamicField($result, 'index')) {
			case 0:
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:30: characters 20-31
				exit(0);
				break;
			case 1:
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:31: characters 16-17
				$e = $result->params[0];
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:32: characters 4-28
				$message = $e->message;
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:33: characters 4-47
				if ($e->data !== null) {
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:33: characters 23-47
					$message = ($message??'null') . ((", " . (\Std::string($e->data)??'null'))??'null');
				}
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:34: characters 4-24
				\Sys::println($message);
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/Cli.hx:34: characters 26-42
				exit($e->code);

				break;
		}
	}
}


Boot::registerClass(Cli::class, 'tink.Cli');

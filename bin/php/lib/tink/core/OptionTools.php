<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\core;

use \php\_Boot\HxException;
use \php\Boot;
use \haxe\ds\Option as DsOption;
use \tink\core\_Lazy\LazyObject;

class OptionTools {
	/**
	 *  Returns `true` if the option is `Some` and the value is equal to `v`, otherwise `false`
	 * 
	 * @param DsOption $o
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	static public function equals ($o, $v) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:58: characters 11-59
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:58: characters 11-59
			$v1 = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:58: characters 48-58
			return Boot::equal($v1, $v);
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:58: characters 11-59
			return false;
		}
	}


	/**
	 *  Returns `Some(value)` if the option is `Some` and the filter function evaluates to `true`, otherwise `None`
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return DsOption
	 */
	static public function filter ($o, $f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:40: lines 40-43
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:41: characters 16-20
			$_hx_tmp = $f($o->params[0]);
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:41: characters 16-20
			if ($_hx_tmp === false) {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:41: characters 32-36
				return DsOption::None();
			} else {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:42: characters 15-16
				return $o;
			}
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:42: characters 15-16
			return $o;
		}
	}


	/**
	 *  Transforms the option value with a transform function
	 *  Different from `map`, the transform function of `flatMap` returns an `Option`
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return DsOption
	 */
	static public function flatMap ($o, $f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:75: lines 75-78
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:76: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:76: characters 20-24
			return $f($v);
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:77: characters 15-19
			return DsOption::None();
		}
	}


	/**
	 *  Extracts the value if the option is `Some`, throws an `Error` otherwise
	 * 
	 * @param DsOption $o
	 * @param object $pos
	 * 
	 * @return mixed
	 */
	static public function force ($o, $pos = null) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:11: lines 11-16
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:12: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:13: characters 8-9
			return $v;
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:15: characters 8-13
			throw new HxException(new TypedError(404, "Some value expected but none found", $pos));
		}
	}


	/**
	 *  Creates an iterator from the option.
	 *  The iterator has one item if the option is `Some`, and no items if it is `None`
	 * 
	 * @param DsOption $o
	 * 
	 * @return OptionIter
	 */
	static public function iterator ($o) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:85: characters 4-28
		return new OptionIter($o);
	}


	/**
	 *  Transforms the option value with a transform function
	 *  Different from `flatMap`, the transform function of `map` returns a plain value
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return DsOption
	 */
	static public function map ($o, $f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:65: lines 65-68
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:66: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:66: characters 20-30
			return DsOption::Some($f($v));
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:67: characters 15-19
			return DsOption::None();
		}
	}


	/**
	 *  Extracts the value if the option is `Some`, uses the fallback value otherwise
	 * 
	 * @param DsOption $o
	 * @param LazyObject $l
	 * 
	 * @return mixed
	 */
	static public function or ($o, $l) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:22: lines 22-25
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:23: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:23: characters 20-21
			return $v;
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:24: characters 15-22
			return $l->get();
		}
	}


	/**
	 *  Extracts the value if the option is `Some`, otherwise `null`
	 * 
	 * @param DsOption $o
	 * 
	 * @return mixed
	 */
	static public function orNull ($o) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:31: lines 31-34
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:32: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:32: characters 20-21
			return $v;
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:33: characters 15-19
			return null;
		}
	}


	/**
	 *  Returns `true` if the option is `Some` and the filter function evaluates to `true`, otherwise `false`
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function satisfies ($o, $f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:49: lines 49-52
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:50: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:50: characters 20-24
			return $f($v);
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:51: characters 15-20
			return false;
		}
	}


	/**
	 *  Creates an array from the option.
	 *  The array has one item if the option is `Some`, and no items if it is `None`
	 * 
	 * @param DsOption $o
	 * 
	 * @return \Array_hx
	 */
	static public function toArray ($o) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:92: lines 92-95
		if (Boot::dynamicField($o, 'index') === 0) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:93: characters 16-17
			$v = $o->params[0];
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:93: characters 20-23
			return \Array_hx::wrap([$v]);
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Option.hx:94: characters 15-17
			return new \Array_hx();
		}
	}
}


Boot::registerClass(OptionTools::class, 'tink.core.OptionTools');

<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\core;

use \php\Boot;
use \php\_Boot\HxException;

class TypedError {
	/**
	 * @var \Array_hx
	 */
	public $callStack;
	/**
	 * @var int
	 */
	public $code;
	/**
	 * @var mixed
	 */
	public $data;
	/**
	 * @var \Array_hx
	 */
	public $exceptionStack;
	/**
	 * @var bool
	 */
	public $isTinkError;
	/**
	 * @var string
	 */
	public $message;
	/**
	 * @var object
	 */
	public $pos;


	/**
	 * @param mixed $v
	 * 
	 * @return TypedError
	 */
	static public function asError ($v) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:116: characters 8-30
		$value = $v;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:116: characters 8-30
		if (($value instanceof TypedError)) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:116: characters 8-30
			return $value;
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:116: characters 8-30
			return null;
		}
	}


	/**
	 * @param \Closure $f
	 * @param \Closure $report
	 * @param object $pos
	 * 
	 * @return Outcome
	 */
	static public function catchExceptions ($f, $report = null, $pos = null) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:121: lines 121-133
		try {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:122: characters 8-20
			return Outcome::Success($f());
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:125: characters 17-27
			$_g = TypedError::asError($e);
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:125: lines 125-132
			$tmp = null;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:126: lines 126-131
			if ($_g === null) {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:127: lines 127-130
				if ($report === null) {
					#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:125: lines 125-132
					$tmp = TypedError::withData(null, "Unexpected Error", $e, $pos);
				} else {
					#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:125: lines 125-132
					$tmp = $report($e);
				}
			} else {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:131: characters 19-20
				$e1 = $_g;
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:125: lines 125-132
				$tmp = $e1;
			}
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:124: lines 124-133
			return Outcome::Failure($tmp);
		}
	}


	/**
	 * @param int $code
	 * @param string $message
	 * @param object $pos
	 * 
	 * @return \Closure
	 */
	static public function reporter ($code = null, $message, $pos = null) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:136: lines 136-137
		return function ($e)  use (&$pos, &$message, &$code) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:137: characters 27-71
			return TypedError::withData($code, $message, $e, $pos);
		};
	}


	/**
	 * @param mixed $any
	 * 
	 * @return mixed
	 */
	static public function rethrow ($any) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:143: characters 6-26
		throw (is_object($__hx__throw = $any) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
	}


	/**
	 * @param \Closure $f
	 * @param \Closure $cleanup
	 * 
	 * @return mixed
	 */
	static public function tryFinally ($f, $cleanup) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:157: lines 157-165
		try {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:158: characters 6-20
			$ret = $f();
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:159: characters 6-15
			$cleanup();
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:160: characters 6-16
			return $ret;
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:163: characters 6-15
			$cleanup();
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:164: characters 13-23
			throw (is_object($__hx__throw = $e) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		}
	}


	/**
	 * @param int $code
	 * @param string $message
	 * @param mixed $data
	 * @param object $pos
	 * 
	 * @return TypedError
	 */
	static public function typed ($code = null, $message, $data, $pos = null) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:100: characters 4-49
		$ret = new TypedError($code, $message, $pos);
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:101: characters 4-19
		$ret->data = $data;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:102: characters 4-14
		return $ret;
	}


	/**
	 * @param int $code
	 * @param string $message
	 * @param mixed $data
	 * @param object $pos
	 * 
	 * @return TypedError
	 */
	static public function withData ($code = null, $message, $data, $pos = null) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:96: characters 4-42
		return TypedError::typed($code, $message, $data, $pos);
	}


	/**
	 * @param int $code
	 * @param string $message
	 * @param object $pos
	 * 
	 * @return void
	 */
	public function __construct ($code = 500, $message, $pos = null) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:48: lines 48-168
		if ($code === null) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:48: lines 48-168
			$code = 500;
		}
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:55: characters 20-24
		$this->isTinkError = true;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:58: characters 4-20
		$this->code = $code;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:59: characters 4-26
		$this->message = $message;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:60: characters 4-18
		$this->pos = $pos;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:61: characters 4-97
		$this->exceptionStack = new \Array_hx();
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:62: characters 4-87
		$this->callStack = new \Array_hx();
	}


	/**
	 * @return string
	 */
	public function printPos () {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:65: lines 65-71
		return ($this->pos->className??'null') . "." . ($this->pos->methodName??'null') . ":" . ($this->pos->lineNumber??'null');
	}


	/**
	 * @return mixed
	 */
	public function throwSelf () {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:92: characters 8-21
		throw new HxException($this);
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:75: characters 4-38
		$ret = "Error#" . ($this->code??'null') . ": " . ($this->message??'null');
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:77: lines 77-78
		if ($this->pos !== null) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:78: characters 6-29
			$ret = ($ret??'null') . ((" @ " . ($this->printPos()??'null'))??'null');
		}
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Error.hx:80: characters 4-14
		return $ret;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(TypedError::class, 'tink.core.TypedError');

<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\core\_Callback;

use \php\Boot;
use \tink\core\Noise;
use \haxe\Timer;

final class Callback_Impl_ {
	/**
	 * @var int
	 */
	const MAX_DEPTH = 500;


	/**
	 * @var int
	 */
	static public $depth = 0;


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function _new ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:5: character 9
		$this1 = $f;
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:5: character 9
		return $this1;
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function defer ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:49: characters 6-28
		Timer::delay($f, 0);
	}


	/**
	 * @param \Array_hx $callbacks
	 * 
	 * @return \Closure
	 */
	static public function fromMany ($callbacks) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:30: lines 30-33
		return function ($v)  use (&$callbacks) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:32: lines 32-33
			$_g = 0;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:32: lines 32-33
			while ($_g < $callbacks->length) {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:32: characters 13-21
				$callback = ($callbacks->arr[$_g] ?? null);
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:32: lines 32-33
				$_g = $_g + 1;
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:33: characters 10-28
				Callback_Impl_::invoke($callback, $v);
			}
		};
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function fromNiladic ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:27: characters 4-47
		return function ($_)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:27: characters 44-47
			$f();
		};
	}


	/**
	 * @param \Closure $cb
	 * 
	 * @return \Closure
	 */
	static public function ignore ($cb) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:24: characters 4-40
		return function ($_)  use (&$cb) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:24: characters 24-40
			Callback_Impl_::invoke($cb, Noise::Noise());
		};
	}


	/**
	 * @param \Closure $this
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function invoke ($this1, $data) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:14: lines 14-19
		if (Callback_Impl_::$depth < 500) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:15: characters 6-13
			Callback_Impl_::$depth++;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:16: characters 6-18
			$this1($data);
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:17: characters 6-13
			Callback_Impl_::$depth--;
		} else {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:19: characters 24-30
			$_e = $this1;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:19: characters 24-35
			$f = function ($data1)  use (&$_e) {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:19: characters 24-30
				Callback_Impl_::invoke($_e, $data1);
			};
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:19: characters 24-35
			$a1 = $data;
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:19: characters 9-42
			Callback_Impl_::defer(function ()  use (&$f, &$a1) {
				#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:19: characters 24-35
				$f($a1);
			});
		}
	}


	/**
	 * @param \Closure $this
	 * 
	 * @return \Closure
	 */
	static public function toFunction ($this1) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Callback.hx:9: characters 4-15
		return $this1;
	}
}


Boot::registerClass(Callback_Impl_::class, 'tink.core._Callback.Callback_Impl_');

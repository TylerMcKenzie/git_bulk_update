<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\core\_Promise;

use \php\_Boot\HxClosure;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Lazy\LazyConst;

final class Combiner_Impl_ {
	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function ofSafe ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:331: characters 4-45
		return function ($x1, $x2)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:331: characters 29-45
			return new SyncFuture(new LazyConst($f($x1, $x2)));
		};
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function ofSafeSync ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:337: characters 4-45
		return function ($x1, $x2)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:337: characters 29-45
			return Promise_Impl_::ofOutcome(Outcome::Success($f($x1, $x2)));
		};
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function ofSync ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:334: characters 4-45
		return function ($x1, $x2)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:334: characters 29-45
			$ret = $f($x1, $x2)->map(new HxClosure(Outcome::class, 'Success'));
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:334: characters 29-45
			return $ret->gather();
		};
	}
}


Boot::registerClass(Combiner_Impl_::class, 'tink.core._Promise.Combiner_Impl_');

<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\core\_Promise;

use \php\_Boot\HxClosure;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Lazy\LazyConst;

final class Next_Impl_ {
	/**
	 * @param \Closure $a
	 * @param \Closure $b
	 * 
	 * @return \Closure
	 */
	static public function _chain ($a, $b) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:317: characters 4-43
		return function ($v)  use (&$b, &$a) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:317: characters 24-43
			return Promise_Impl_::next($a($v), $b);
		};
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function ofSafe ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:308: characters 4-35
		return function ($x)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:308: characters 24-35
			return new SyncFuture(new LazyConst($f($x)));
		};
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function ofSafeSync ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:314: characters 4-35
		return function ($x)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:314: characters 24-35
			return Promise_Impl_::ofOutcome(Outcome::Success($f($x)));
		};
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function ofSync ($f) {
		#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:311: characters 4-35
		return function ($x)  use (&$f) {
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:311: characters 24-35
			$ret = $f($x)->map(new HxClosure(Outcome::class, 'Success'));
			#/home/vagrant/haxelib/tink_core/1,23,0/src/tink/core/Promise.hx:311: characters 24-35
			return $ret->gather();
		};
	}
}


Boot::registerClass(Next_Impl_::class, 'tink.core._Promise.Next_Impl_');

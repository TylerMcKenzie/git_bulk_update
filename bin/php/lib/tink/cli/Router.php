<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\cli;

use \tink\core\_Promise\Promise_Impl_;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxString;
use \tink\core\Noise;
use \php\_Boot\HxAnon;

class Router {
	/**
	 * @var mixed
	 */
	public $command;
	/**
	 * @var bool
	 */
	public $hasFlags;
	/**
	 * @var Prompt
	 */
	public $prompt;


	/**
	 * @param mixed $command
	 * @param Prompt $prompt
	 * @param bool $hasFlags
	 * 
	 * @return void
	 */
	public function __construct ($command, $prompt, $hasFlags) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:11: characters 2-24
		$this->command = $command;
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:12: characters 2-22
		$this->prompt = $prompt;
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:13: characters 2-26
		$this->hasFlags = $hasFlags;
	}


	/**
	 * @param \Array_hx $args
	 * 
	 * @return FutureObject
	 */
	public function process ($args) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:17: characters 2-14
		return Promise_Impl_::ofOutcome(Outcome::Success(Noise::Noise()));
	}


	/**
	 * @param \Array_hx $args
	 * @param int $index
	 * 
	 * @return int
	 */
	public function processAlias ($args, $index) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:64: characters 2-11
		return -1;
	}


	/**
	 * @param \Array_hx $args
	 * 
	 * @return Outcome
	 */
	public function processArgs ($args) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:20: lines 20-57
		$_gthis = $this;
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:22: lines 22-56
		if (!$this->hasFlags) {
			#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:23: characters 4-17
			return Outcome::Success($args);
		} else {
			#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:25: lines 25-56
			return TypedError::catchExceptions(function ()  use (&$args, &$_gthis) {
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:26: characters 5-19
				$rest = new \Array_hx();
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:27: characters 5-15
				$i = 0;
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:28: characters 5-28
				$flagsEnded = false;
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:29: lines 29-54
				while ($i < $args->length) {
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:30: characters 6-24
					$arg = ($args->arr[$i] ?? null);
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:32: lines 32-53
					if ($arg === "--") {
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:33: characters 7-24
						$flagsEnded = true;
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:34: characters 7-10
						$i = $i + 1;
					} else if (!$flagsEnded && (HxString::charCodeAt($arg, 0) === 45)) {
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:36: characters 14-34
						$_g = $_gthis->processFlag($args, $i);
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:36: characters 14-34
						if ($_g === -1) {
							#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:38: lines 38-45
							if (HxString::charCodeAt($arg, 1) !== 45) {
								#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:39: characters 17-38
								$_g1 = $_gthis->processAlias($args, $i);
								#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:39: characters 17-38
								if ($_g1 === -1) {
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:40: characters 20-25
									throw new HxException("Unrecognized alias \"" . ($arg??'null') . "\"");
								} else {
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:41: characters 16-17
									$v = $_g1;
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:41: characters 19-29
									$i = $i + ($v + 1);
								}
							} else {
								#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:44: characters 10-15
								throw new HxException("Unrecognized flag \"" . ($arg??'null') . "\"");
							}
						} else {
							#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:47: characters 13-14
							$v1 = $_g;
							#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:48: characters 9-19
							$i = $i + ($v1 + 1);
						}
					} else {
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:51: characters 7-21
						$rest->arr[$rest->length] = $arg;
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:51: characters 7-21
						++$rest->length;

						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:52: characters 7-10
						$i = $i + 1;
					}
				}
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:55: characters 5-16
				return $rest;
			}, null, new HxAnon([
				"fileName" => "Router.hx",
				"lineNumber" => 25,
				"className" => "tink.cli.Router",
				"methodName" => "processArgs",
			]));
		}
	}


	/**
	 * @param \Array_hx $args
	 * @param int $index
	 * 
	 * @return int
	 */
	public function processFlag ($args, $index) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:60: characters 2-11
		return -1;
	}


	/**
	 * @return FutureObject
	 */
	public function promptRequired () {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/Router.hx:68: characters 2-14
		return Promise_Impl_::ofOutcome(Outcome::Success(Noise::Noise()));
	}
}


Boot::registerClass(Router::class, 'tink.cli.Router');

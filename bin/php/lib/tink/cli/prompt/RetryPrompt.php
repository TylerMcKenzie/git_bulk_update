<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace tink\cli\prompt;

use \tink\cli\PromptTypeBase;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\Future_Impl_;
use \tink\cli\Prompt;
use \php\_Boot\HxAnon;

class RetryPrompt implements Prompt {
	/**
	 * @var Prompt
	 */
	public $proxy;
	/**
	 * @var int
	 */
	public $trials;


	/**
	 * @param int $trials
	 * @param Prompt $proxy
	 * 
	 * @return void
	 */
	public function __construct ($trials, $proxy = null) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:13: characters 2-22
		$this->trials = $trials;
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:14: characters 2-58
		$this->proxy = ($proxy === null ? new SysPrompt() : $proxy);
	}


	/**
	 * @param string $v
	 * 
	 * @return FutureObject
	 */
	public function print ($v) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:18: characters 2-23
		return $this->proxy->print($v);
	}


	/**
	 * @param string $v
	 * 
	 * @return FutureObject
	 */
	public function println ($v) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:22: characters 2-25
		return $this->proxy->println($v);
	}


	/**
	 * @param PromptTypeBase $type
	 * 
	 * @return FutureObject
	 */
	public function prompt ($type) {
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:25: lines 25-53
		$_gthis = $this;
		#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:26: lines 26-51
		switch (Boot::dynamicField($type, 'index')) {
			case 1:
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:29: characters 27-28
				$c = $type->params[1];
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:29: characters 24-25
				$v = $type->params[0];
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:30: lines 30-50
				return Future_Impl_::async(function ($cb)  use (&$c, &$_gthis, &$type) {
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:31: characters 5-28
					$remaining = $_gthis->trials;
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:32: lines 32-48
					$next = null;
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:32: lines 32-48
					$next = function ()  use (&$next, &$c, &$_gthis, &$type, &$remaining, &$cb) {
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:33: characters 6-17
						$remaining = $remaining - 1;
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:34: lines 34-37
						$retry = function ()  use (&$next, &$remaining, &$cb) {
							#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:35: lines 35-36
							if ($remaining > 0) {
								#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:35: characters 25-31
								$next();
							} else {
								#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:36: characters 16-61
								$retry1 = Outcome::Failure(new TypedError(null, "Maximum retries reached", new HxAnon([
									"fileName" => "RetryPrompt.hx",
									"lineNumber" => 36,
									"className" => "tink.cli.prompt.RetryPrompt",
									"methodName" => "prompt",
								])));
								#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:36: characters 13-62
								$cb($retry1);
							}
						};
						#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:39: lines 39-47
						$_gthis->proxy->prompt($type)->handle(function ($o)  use (&$c, &$retry, &$cb) {
							#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:39: lines 39-47
							switch (Boot::dynamicField($o, 'index')) {
								case 0:
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:40: characters 20-26
									$result = $o->params[0];
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:41: lines 41-44
									if ($c->indexOf($result) === -1) {
										#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:42: characters 9-16
										$retry();
									} else {
										#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:44: characters 9-28
										$cb(Outcome::Success($result));
									}
									break;
								case 1:
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:45: characters 20-21
									$f = $o->params[0];
									#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:46: characters 8-15
									$retry();
									break;
							}
						});
					};
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:32: lines 32-48
					$next1 = $next;
					#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:49: characters 5-11
					$next1();
				});
				break;
			case 0:
			case 2:
				#/home/vagrant/haxelib/tink_cli/0,4,1/src/tink/cli/prompt/RetryPrompt.hx:28: characters 4-22
				return $this->proxy->prompt($type);
				break;
		}
	}
}


Boot::registerClass(RetryPrompt::class, 'tink.cli.prompt.RetryPrompt');

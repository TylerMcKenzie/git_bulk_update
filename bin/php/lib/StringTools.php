<?php
/**
 * Generated by Haxe 3.4.7
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * @var \Array_hx
	 * Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.
	 */
	static public $winMetaCharacters;


	/**
	 * Returns a String that can be used as a single command line argument
	 * on Unix.
	 * The input will be quoted, or escaped if necessary.
	 * 
	 * @param string $argument
	 * 
	 * @return string
	 */
	static public function quoteUnixArg ($argument) {
		#/usr/share/haxe/std/php7/_std/StringTools.hx:114: lines 114-115
		if ($argument === "") {
			#/usr/share/haxe/std/php7/_std/StringTools.hx:115: characters 3-14
			return "''";
		}
		#/usr/share/haxe/std/php7/_std/StringTools.hx:117: lines 117-118
		if (!(new \EReg("[^a-zA-Z0-9_@%+=:,./-]", ""))->match($argument)) {
			#/usr/share/haxe/std/php7/_std/StringTools.hx:118: characters 3-18
			return $argument;
		}
		#/usr/share/haxe/std/php7/_std/StringTools.hx:122: characters 2-54
		return "'" . (StringTools::replace($argument, "'", "'\"'\"'")??'null') . "'";
	}


	/**
	 * Returns a String that can be used as a single command line argument
	 * on Windows.
	 * The input will be quoted, or escaped if necessary, such that the output
	 * will be parsed as a single argument using the rule specified in
	 * http://msdn.microsoft.com/en-us/library/ms880421
	 * Examples:
	 * ```
	 * quoteWinArg("abc") == "abc";
	 * quoteWinArg("ab c") == '"ab c"';
	 * ```
	 * 
	 * @param string $argument
	 * @param bool $escapeMetaCharacters
	 * 
	 * @return string
	 */
	static public function quoteWinArg ($argument, $escapeMetaCharacters) {
		#/usr/share/haxe/std/php7/_std/StringTools.hx:145: lines 145-188
		if (!(new \EReg("^[^ \x09\\\\\"]+\$", ""))->match($argument)) {
			#/usr/share/haxe/std/php7/_std/StringTools.hx:150: characters 3-32
			$result = new \StringBuf();
			#/usr/share/haxe/std/php7/_std/StringTools.hx:151: characters 3-97
			$needquote = (HxString::indexOf($argument, " ") !== -1) || (HxString::indexOf($argument, "\x09") !== -1) || ($argument === "");
			#/usr/share/haxe/std/php7/_std/StringTools.hx:153: lines 153-154
			if ($needquote) {
				#/usr/share/haxe/std/php7/_std/StringTools.hx:154: characters 4-19
				$result->add("\"");
			}
			#/usr/share/haxe/std/php7/_std/StringTools.hx:156: characters 3-32
			$bs_buf = new \StringBuf();
			#/usr/share/haxe/std/php7/_std/StringTools.hx:157: lines 157-177
			$_g1 = 0;
			#/usr/share/haxe/std/php7/_std/StringTools.hx:157: lines 157-177
			$_g = strlen($argument);
			#/usr/share/haxe/std/php7/_std/StringTools.hx:157: lines 157-177
			while ($_g1 < $_g) {
				#/usr/share/haxe/std/php7/_std/StringTools.hx:157: lines 157-177
				$_g1 = $_g1 + 1;
				#/usr/share/haxe/std/php7/_std/StringTools.hx:157: characters 8-9
				$i = $_g1 - 1;
				#/usr/share/haxe/std/php7/_std/StringTools.hx:158: characters 12-34
				$_g2 = HxString::charCodeAt($argument, $i);
				#/usr/share/haxe/std/php7/_std/StringTools.hx:158: lines 158-175
				if ($_g2 === null) {
					#/usr/share/haxe/std/php7/_std/StringTools.hx:169: characters 10-11
					$c = $_g2;
					#/usr/share/haxe/std/php7/_std/StringTools.hx:171: lines 171-174
					if (strlen($bs_buf->b) > 0) {
						#/usr/share/haxe/std/php7/_std/StringTools.hx:172: characters 7-36
						$result->add($bs_buf->b);
						#/usr/share/haxe/std/php7/_std/StringTools.hx:173: characters 7-31
						$bs_buf = new \StringBuf();
					}
					#/usr/share/haxe/std/php7/_std/StringTools.hx:175: characters 6-12
					$result1 = $result;
					#/usr/share/haxe/std/php7/_std/StringTools.hx:175: characters 6-23
					$result1->b = ($result1->b??'null') . (HxString::fromCharCode($c)??'null');

				} else {
					#/usr/share/haxe/std/php7/_std/StringTools.hx:158: characters 12-34
					switch ($_g2) {
						case 34:
							#/usr/share/haxe/std/php7/_std/StringTools.hx:164: characters 6-33
							$bs = $bs_buf->b;
							#/usr/share/haxe/std/php7/_std/StringTools.hx:165: characters 6-20
							$result->add($bs);
							#/usr/share/haxe/std/php7/_std/StringTools.hx:166: characters 6-20
							$result->add($bs);
							#/usr/share/haxe/std/php7/_std/StringTools.hx:167: characters 6-30
							$bs_buf = new \StringBuf();
							#/usr/share/haxe/std/php7/_std/StringTools.hx:168: characters 6-23
							$result->add("\\\"");
							break;
						case 92:
							#/usr/share/haxe/std/php7/_std/StringTools.hx:161: characters 6-22
							$bs_buf->add("\\");
							break;
						default:
							#/usr/share/haxe/std/php7/_std/StringTools.hx:169: characters 10-11
							$c1 = $_g2;
							#/usr/share/haxe/std/php7/_std/StringTools.hx:171: lines 171-174
							if (strlen($bs_buf->b) > 0) {
								#/usr/share/haxe/std/php7/_std/StringTools.hx:172: characters 7-36
								$result->add($bs_buf->b);
								#/usr/share/haxe/std/php7/_std/StringTools.hx:173: characters 7-31
								$bs_buf = new \StringBuf();
							}
							#/usr/share/haxe/std/php7/_std/StringTools.hx:175: characters 6-12
							$result2 = $result;
							#/usr/share/haxe/std/php7/_std/StringTools.hx:175: characters 6-23
							$result2->b = ($result2->b??'null') . (HxString::fromCharCode($c1)??'null');

							break;
					}
				}

			}

			#/usr/share/haxe/std/php7/_std/StringTools.hx:180: characters 3-32
			$result->add($bs_buf->b);
			#/usr/share/haxe/std/php7/_std/StringTools.hx:182: lines 182-185
			if ($needquote) {
				#/usr/share/haxe/std/php7/_std/StringTools.hx:183: characters 4-33
				$result->add($bs_buf->b);
				#/usr/share/haxe/std/php7/_std/StringTools.hx:184: characters 4-19
				$result->add("\"");
			}
			#/usr/share/haxe/std/php7/_std/StringTools.hx:187: characters 3-31
			$argument = $result->b;
		}
		#/usr/share/haxe/std/php7/_std/StringTools.hx:190: lines 190-202
		if ($escapeMetaCharacters) {
			#/usr/share/haxe/std/php7/_std/StringTools.hx:191: characters 3-32
			$result3 = new \StringBuf();
			#/usr/share/haxe/std/php7/_std/StringTools.hx:192: lines 192-198
			$_g11 = 0;
			#/usr/share/haxe/std/php7/_std/StringTools.hx:192: lines 192-198
			$_g3 = strlen($argument);
			#/usr/share/haxe/std/php7/_std/StringTools.hx:192: lines 192-198
			while ($_g11 < $_g3) {
				#/usr/share/haxe/std/php7/_std/StringTools.hx:192: lines 192-198
				$_g11 = $_g11 + 1;
				#/usr/share/haxe/std/php7/_std/StringTools.hx:192: characters 8-9
				$i1 = $_g11 - 1;
				#/usr/share/haxe/std/php7/_std/StringTools.hx:193: characters 4-35
				$c2 = HxString::charCodeAt($argument, $i1);
				#/usr/share/haxe/std/php7/_std/StringTools.hx:194: lines 194-196
				if (StringTools::$winMetaCharacters->indexOf($c2) >= 0) {
					#/usr/share/haxe/std/php7/_std/StringTools.hx:195: characters 5-11
					$result4 = $result3;
					#/usr/share/haxe/std/php7/_std/StringTools.hx:195: characters 5-29
					$result4->b = ($result4->b??'null') . "^";
				}
				#/usr/share/haxe/std/php7/_std/StringTools.hx:197: characters 4-10
				$result5 = $result3;
				#/usr/share/haxe/std/php7/_std/StringTools.hx:197: characters 4-21
				$result5->b = ($result5->b??'null') . (HxString::fromCharCode($c2)??'null');
			}

			#/usr/share/haxe/std/php7/_std/StringTools.hx:199: characters 3-27
			return $result3->b;
		} else {
			#/usr/share/haxe/std/php7/_std/StringTools.hx:201: characters 3-18
			return $argument;
		}
	}


	/**
	 * Replace all occurrences of the String `sub` in the String `s` by the
	 * String `by`.
	 * If `sub` is the empty String `""`, `by` is inserted after each character
	 * of `s`. If `by` is also the empty String `""`, `s` remains unchanged.
	 * This is a convenience function for `s.split(sub).join(by)`.
	 * If `sub` or `by` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $sub
	 * @param string $by
	 * 
	 * @return string
	 */
	static public function replace ($s, $sub, $by) {
		#/usr/share/haxe/std/php7/_std/StringTools.hx:81: lines 81-83
		if ($sub === "") {
			#/usr/share/haxe/std/php7/_std/StringTools.hx:82: characters 3-49
			return implode($by, str_split($s));
		}
		#/usr/share/haxe/std/php7/_std/StringTools.hx:84: characters 2-39
		return str_replace($sub, $by, $s);
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$winMetaCharacters = \Array_hx::wrap([
	59,
	44,
	32,
	40,
	41,
	37,
	33,
	94,
	34,
	60,
	62,
	38,
	124,
	10,
	13,
]);
	}
}


Boot::registerClass(StringTools::class, 'StringTools');
StringTools::__hx__init();

<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace php\_Boot;

use \php\Boot;

/**
 * Class<T> implementation for Haxe->PHP internals.
 */
class HxClass {
	/**
	 * @var string
	 */
	public $phpClassName;


	/**
	 * @param string $phpClassName
	 * 
	 * @return void
	 */
	public function __construct ($phpClassName) {
		#/usr/share/haxe/std/php7/Boot.hx:550: characters 2-34
		$this->phpClassName = $phpClassName;
	}


	/**
	 * Magic method to call static methods of this class, when `HxClass` instance is in a `Dynamic` variable.
	 * 
	 * @param string $method
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function __call ($method, $args) {
		#/usr/share/haxe/std/php7/Boot.hx:558: characters 2-114
		$callback = ((($this->phpClassName === "String" ? Boot::getClass(HxString::class)->phpClassName : $this->phpClassName))??'null') . "::" . ($method??'null');
		#/usr/share/haxe/std/php7/Boot.hx:559: characters 2-52
		return call_user_func_array($callback, $args);
	}


	/**
	 * Magic method to get static vars of this class, when `HxClass` instance is in a `Dynamic` variable.
	 * 
	 * @param string $property
	 * 
	 * @return mixed
	 */
	public function __get ($property) {
		#/usr/share/haxe/std/php7/Boot.hx:567: lines 567-573
		if (defined("" . ($this->phpClassName??'null') . "::" . ($property??'null'))) {
			#/usr/share/haxe/std/php7/Boot.hx:568: characters 3-53
			return constant("" . ($this->phpClassName??'null') . "::" . ($property??'null'));
		} else if (Boot::hasGetter($this->phpClassName, $property)) {
			#/usr/share/haxe/std/php7/Boot.hx:570: characters 28-40
			$tmp = $this->phpClassName;
			#/usr/share/haxe/std/php7/Boot.hx:570: characters 43-56
			$tmp1 = "get_" . ($property??'null');
			#/usr/share/haxe/std/php7/Boot.hx:570: characters 3-58
			return $tmp::{$tmp1}();
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:572: characters 32-44
			$tmp2 = $this->phpClassName;
			#/usr/share/haxe/std/php7/Boot.hx:572: characters 46-54
			$tmp3 = $property;
			#/usr/share/haxe/std/php7/Boot.hx:572: characters 3-55
			return $tmp2::${$tmp3};
		}
	}


	/**
	 * Magic method to set static vars of this class, when `HxClass` instance is in a `Dynamic` variable.
	 * 
	 * @param string $property
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function __set ($property, $value) {
		#/usr/share/haxe/std/php7/Boot.hx:581: lines 581-585
		if (Boot::hasSetter($this->phpClassName, $property)) {
			#/usr/share/haxe/std/php7/Boot.hx:582: characters 21-33
			$tmp = $this->phpClassName;
			#/usr/share/haxe/std/php7/Boot.hx:582: characters 36-49
			$tmp1 = "set_" . ($property??'null');
			#/usr/share/haxe/std/php7/Boot.hx:582: characters 3-58
			$tmp::{$tmp1}($value);
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:584: characters 25-37
			$tmp2 = $this->phpClassName;
			#/usr/share/haxe/std/php7/Boot.hx:584: characters 39-47
			$tmp3 = $property;
			#/usr/share/haxe/std/php7/Boot.hx:584: characters 3-55
			$tmp2::${$tmp3} = $value;
		}
	}
}


Boot::registerClass(HxClass::class, 'php._Boot.HxClass');

<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace sys;

use \php\Boot;

/**
 * This class allows you to get information about the files and directories.
 * See `sys.io.File` for the complementary file API.
 */
class FileSystem {
	/**
	 * Returns the names of all files and directories in the directory specified
	 * by `path`.
	 * If `path` does not denote a valid directory, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return \Array_hx
	 */
	static public function readDirectory ($path) {
		#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:101: characters 2-16
		$list = new \Array_hx();
		#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:102: characters 2-33
		$dir = opendir($path);
		#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:103: characters 2-11
		$file = null;
		#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:104: lines 104-108
		while (true) {
			#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:104: characters 9-37
			$file = readdir($dir);
			#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:104: lines 104-108
			if (!($file !== false)) {
				#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:104: lines 104-108
				break;
			}
			#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:105: lines 105-107
			if (($file !== ".") && ($file !== "..")) {
				#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:106: characters 4-19
				$list->arr[$list->length] = $file;
				#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:106: characters 4-19
				++$list->length;
			}
		}
		#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:109: characters 2-22
		closedir($dir);
		#/usr/share/haxe/std/php7/_std/sys/FileSystem.hx:110: characters 8-19
		return $list;
	}
}


Boot::registerClass(FileSystem::class, 'sys.FileSystem');

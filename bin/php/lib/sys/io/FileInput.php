<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace sys\io;

use \haxe\io\Eof;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\Input;
use \haxe\io\Error;

/**
 * Use `sys.io.File.read` to create a `FileInput`.
 */
class FileInput extends Input {
	/**
	 * @var mixed
	 */
	public $__f;


	/**
	 * @param mixed $f
	 * 
	 * @return void
	 */
	public function __construct ($f) {
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:37: characters 2-9
		$this->__f = $f;
	}


	/**
	 * @return int
	 */
	public function readByte () {
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:41: characters 2-24
		$r = fread($this->__f, 1);
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:42: characters 2-21
		if (feof($this->__f)) {
			#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:42: characters 16-21
			throw new HxException(new Eof());
		}
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:43: characters 2-22
		if ($r === false) {
			#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:43: characters 17-22
			throw new HxException(Error::Custom("An error occurred"));
		}
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:44: characters 2-15
		return ord($r);
	}


	/**
	 * @return string
	 */
	public function readLine () {
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:83: characters 2-21
		$r = fgets($this->__f);
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:84: characters 2-23
		if (false === $r) {
			#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:84: characters 18-23
			throw new HxException(new Eof());
		}
		#/usr/share/haxe/std/php7/_std/sys/io/FileInput.hx:85: characters 2-25
		return rtrim($r, "\x0D\x0A");
	}
}


Boot::registerClass(FileInput::class, 'sys.io.FileInput');

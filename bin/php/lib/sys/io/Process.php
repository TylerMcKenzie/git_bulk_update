<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace sys\io;

use \php\_Boot\HxClosure;
use \haxe\io\Output;
use \php\Boot;
use \sys\io\_Process\WritablePipe;
use \php\_Boot\HxException;
use \haxe\io\Input;
use \sys\io\_Process\ReadablePipe;
use \haxe\io\Error;

class Process {
	/**
	 * @var int
	 */
	public $_exitCode;
	/**
	 * @var int
	 */
	public $pid;
	/**
	 * @var mixed
	 */
	public $pipes;
	/**
	 * @var mixed
	 */
	public $process;
	/**
	 * @var bool
	 */
	public $running;
	/**
	 * @var Input
	 * Standard error. The output stream to output error messages or diagnostics.
	 */
	public $stderr;
	/**
	 * @var Output
	 * Standard input. The stream data going into a process.
	 */
	public $stdin;
	/**
	 * @var Input
	 * Standard output. The output stream where a process writes its output data.
	 */
	public $stdout;


	/**
	 * Construct a `Process` object, which run the given command immediately.
	 * Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.
	 * 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
	 * `cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.
	 * 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
	 * It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).
	 * `close()` should be called when the `Process` is no longer used.
	 * 
	 * @param string $cmd
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function __construct ($cmd, $args = null) {
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:121: characters 23-25
		$this->_exitCode = -1;
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:120: characters 22-26
		$this->running = true;
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:119: characters 17-19
		$this->pid = -1;
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:137: lines 137-141
		$descriptors = [["pipe", "r"], ["pipe", "w"], ["pipe", "w"]];
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:142: characters 2-65
		$result = proc_open($this->buildCmd($cmd, $args), $descriptors, $this->pipes);
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:143: characters 2-28
		if ($result === false) {
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:143: characters 23-28
			throw new HxException(Error::Custom("Failed to start process: " . ($cmd??'null')));
		}
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:144: characters 2-18
		$this->process = $result;
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:146: characters 2-16
		$this->updateStatus();
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:148: characters 2-39
		$this->stdin = new WritablePipe($this->pipes[0]);
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:149: characters 2-41
		$this->stdout = new ReadablePipe($this->pipes[1]);
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:150: characters 2-41
		$this->stderr = new ReadablePipe($this->pipes[2]);
	}


	/**
	 * @param string $cmd
	 * @param \Array_hx $args
	 * 
	 * @return string
	 */
	public function buildCmd ($cmd, $args = null) {
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:192: characters 2-30
		if ($args === null) {
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:192: characters 20-30
			return $cmd;
		}
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:194: characters 17-33
		$_g = \Sys::systemName();
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:194: characters 17-33
		if ($_g === "Windows") {
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
			$_this = (\Array_hx::wrap([\StringTools::replace($cmd, "/", "\\")]))->concat($args);
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
			$result = [];
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
			$_g1 = 0;
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
			$_g2 = $_this->length;
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
			while ($_g1 < $_g2) {
				#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
				$_g1 = $_g1 + 1;
				#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
				$i = $_g1 - 1;
				#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-84
				$result[$i] = \StringTools::quoteWinArg($_this->arr[$i], true);
			}

			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:196: characters 4-94
			return \Array_hx::wrap($result)->join(" ");
		} else {
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
			$_this1 = (\Array_hx::wrap([$cmd]))->concat($args);
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
			$f = new HxClosure(\StringTools::class, 'quoteUnixArg');
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
			$result1 = [];
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
			$_g11 = 0;
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
			$_g3 = $_this1->length;
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
			while ($_g11 < $_g3) {
				#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
				$_g11 = $_g11 + 1;
				#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
				$i1 = $_g11 - 1;
				#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-52
				$result1[$i1] = $f($_this1->arr[$i1]);
			}

			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:198: characters 4-62
			return \Array_hx::wrap($result1)->join(" ");
		}
	}


	/**
	 * @return void
	 */
	public function updateStatus () {
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:203: characters 2-22
		if (!$this->running) {
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:203: characters 16-22
			return;
		}
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:205: characters 2-41
		$status = proc_get_status($this->process);
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:206: characters 2-28
		if ($status === false) {
			#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:206: characters 23-28
			throw new HxException(Error::Custom("Failed to obtain process status"));
		}
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:207: characters 2-47
		$status1 = $status;
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:209: characters 2-21
		$this->pid = $status1["pid"];
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:210: characters 2-29
		$this->running = $status1["running"];
		#/usr/share/haxe/std/php7/_std/sys/io/Process.hx:211: characters 2-32
		$this->_exitCode = $status1["exitcode"];
	}
}


Boot::registerClass(Process::class, 'sys.io.Process');

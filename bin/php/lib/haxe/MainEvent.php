<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace haxe;

use \php\Boot;

class MainEvent {
	/**
	 * @var \Closure
	 */
	public $f;
	/**
	 * @var MainEvent
	 */
	public $next;
	/**
	 * @var float
	 */
	public $nextRun;
	/**
	 * @var MainEvent
	 */
	public $prev;
	/**
	 * @var int
	 */
	public $priority;


	/**
	 * @param \Closure $f
	 * @param int $p
	 * 
	 * @return void
	 */
	public function __construct ($f, $p) {
		#/usr/share/haxe/std/haxe/MainLoop.hx:13: characters 2-12
		$this->f = $f;
		#/usr/share/haxe/std/haxe/MainLoop.hx:14: characters 2-19
		$this->priority = $p;
		#/usr/share/haxe/std/haxe/MainLoop.hx:15: characters 2-14
		$this->nextRun = -1;
	}


	/**
	 * Delay the execution of the event for the given time, in seconds.
	 * If t is null, the event will be run at tick() time.
	 * 
	 * @param float $t
	 * 
	 * @return void
	 */
	public function delay ($t) {
		#/usr/share/haxe/std/haxe/MainLoop.hx:23: characters 2-51
		$this->nextRun = ($t === null ? -1 : microtime(true) + $t);
	}


	/**
	 * Stop the event from firing anymore.
	 * 
	 * @return void
	 */
	public function stop () {
		#/usr/share/haxe/std/haxe/MainLoop.hx:37: characters 2-24
		if ($this->f === null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:37: characters 18-24
			return;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:38: characters 2-10
		$this->f = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:39: characters 2-14
		$this->nextRun = -1;
		#/usr/share/haxe/std/haxe/MainLoop.hx:40: lines 40-43
		if ($this->prev === null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:41: characters 19-42
			MainLoop::$pending = $this->next;
		} else {
			#/usr/share/haxe/std/haxe/MainLoop.hx:43: characters 3-19
			$this->prev->next = $this->next;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:44: lines 44-45
		if ($this->next !== null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:45: characters 3-19
			$this->next->prev = $this->prev;
		}
	}
}


Boot::registerClass(MainEvent::class, 'haxe.MainEvent');

<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace haxe;

use \php\Boot;
use \haxe\_EntryPoint\Lock;
use \haxe\_EntryPoint\Mutex;

/**
 * If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main().
 * This class can be redefined by custom frameworks so they can handle their own main loop logic.
 */
class EntryPoint {
	/**
	 * @var Mutex
	 */
	static public $mutex;
	/**
	 * @var \Array_hx
	 */
	static public $pending;
	/**
	 * @var Lock
	 */
	static public $sleepLock;
	/**
	 * @var int
	 */
	static public $threadCount = 0;


	/**
	 * @return float
	 */
	static public function processEvents () {
		#/usr/share/haxe/std/haxe/EntryPoint.hx:93: lines 93-103
		while (true) {
			#/usr/share/haxe/std/haxe/EntryPoint.hx:95: characters 3-18
			$_this = EntryPoint::$mutex;
			#/usr/share/haxe/std/haxe/EntryPoint.hx:96: characters 11-26
			$_this1 = EntryPoint::$pending;
			#/usr/share/haxe/std/haxe/EntryPoint.hx:96: characters 11-26
			if ($_this1->length > 0) {
				#/usr/share/haxe/std/haxe/EntryPoint.hx:96: characters 11-26
				$_this1->length--;
			}
			#/usr/share/haxe/std/haxe/EntryPoint.hx:96: characters 3-27
			$f = array_shift($_this1->arr);
			#/usr/share/haxe/std/haxe/EntryPoint.hx:97: characters 3-18
			$_this2 = EntryPoint::$mutex;
			#/usr/share/haxe/std/haxe/EntryPoint.hx:101: characters 3-24
			if ($f === null) {
				#/usr/share/haxe/std/haxe/EntryPoint.hx:101: characters 19-24
				break;
			}
			#/usr/share/haxe/std/haxe/EntryPoint.hx:102: characters 3-6
			$f();
		}
		#/usr/share/haxe/std/haxe/EntryPoint.hx:104: lines 104-105
		if ((MainLoop::$pending === null) && (EntryPoint::$threadCount === 0)) {
			#/usr/share/haxe/std/haxe/EntryPoint.hx:105: characters 3-12
			return -1;
		}
		#/usr/share/haxe/std/haxe/EntryPoint.hx:106: characters 2-40
		return MainLoop::tick();
	}


	/**
	 * Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.
	 * 
	 * @return void
	 */
	static public function run () {
		#/usr/share/haxe/std/haxe/EntryPoint.hx:134: lines 134-140
		while (true) {
			#/usr/share/haxe/std/haxe/EntryPoint.hx:135: characters 3-34
			$nextTick = EntryPoint::processEvents();
			#/usr/share/haxe/std/haxe/EntryPoint.hx:136: lines 136-137
			if ($nextTick < 0) {
				#/usr/share/haxe/std/haxe/EntryPoint.hx:137: characters 4-9
				break;
			}
			#/usr/share/haxe/std/haxe/EntryPoint.hx:138: lines 138-139
			if ($nextTick > 0) {
				#/usr/share/haxe/std/haxe/EntryPoint.hx:139: characters 4-28
				$_this = EntryPoint::$sleepLock;
			}
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$sleepLock = new Lock();
self::$mutex = new Mutex();
self::$pending = new \Array_hx();
	}
}


Boot::registerClass(EntryPoint::class, 'haxe.EntryPoint');
EntryPoint::__hx__init();

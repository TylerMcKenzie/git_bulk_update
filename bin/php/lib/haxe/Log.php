<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace haxe;

use \php\Boot;

/**
 * Log primarily provides the `trace()` method, which is invoked upon a call to
 * `trace()` in Haxe code.
 */
class Log {
	/**
	 * @var \Closure
	 * Outputs `v` in a platform-dependent way.
	 * The second parameter `infos` is injected by the compiler and contains
	 * information about the position where the `trace()` call was made.
	 * This method can be rebound to a custom function:
	 * var oldTrace = haxe.Log.trace; // store old function
	 * haxe.Log.trace = function(v, ?infos) {
	 * // handle trace
	 * }
	 * ...
	 * haxe.Log.trace = oldTrace;
	 * If it is bound to null, subsequent calls to `trace()` will cause an
	 * exception.
	 */
	static public $trace;




	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$trace = function ($v, $infos = null) {
	#/usr/share/haxe/std/haxe/Log.hx:66: characters 3-27
	Boot::trace($v, $infos);
};
	}
}


Boot::registerClass(Log::class, 'haxe.Log');
Log::__hx__init();

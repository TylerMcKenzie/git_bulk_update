<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace haxe;

use \php\Boot;
use \php\_Boot\HxException;

class MainLoop {
	/**
	 * @var MainEvent
	 */
	static public $pending = null;


	/**
	 * Add a pending event to be run into the main loop.
	 * 
	 * @param \Closure $f
	 * @param int $priority
	 * 
	 * @return MainEvent
	 */
	static public function add ($f, $priority = 0) {
		#/usr/share/haxe/std/haxe/MainLoop.hx:74: lines 74-83
		if ($priority === null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:74: lines 74-83
			$priority = 0;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:75: lines 75-76
		if ($f === null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:76: characters 3-8
			throw new HxException("Event function is null");
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:77: characters 2-37
		$e = new MainEvent($f, $priority);
		#/usr/share/haxe/std/haxe/MainLoop.hx:78: characters 2-21
		$head = MainLoop::$pending;
		#/usr/share/haxe/std/haxe/MainLoop.hx:79: characters 2-34
		if ($head !== null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:79: characters 21-34
			$head->prev = $e;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:80: characters 2-15
		$e->next = $head;
		#/usr/share/haxe/std/haxe/MainLoop.hx:81: characters 2-13
		MainLoop::$pending = $e;
		#/usr/share/haxe/std/haxe/MainLoop.hx:82: characters 2-10
		return $e;
	}


	/**
	 * @return void
	 */
	static public function sortEvents () {
		#/usr/share/haxe/std/haxe/MainLoop.hx:89: characters 2-21
		$list = MainLoop::$pending;
		#/usr/share/haxe/std/haxe/MainLoop.hx:91: characters 2-27
		if ($list === null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:91: characters 21-27
			return;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:93: characters 2-48
		$insize = 1;
		#/usr/share/haxe/std/haxe/MainLoop.hx:93: characters 2-48
		$nmerges = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:93: characters 2-48
		$psize = 0;
		#/usr/share/haxe/std/haxe/MainLoop.hx:93: characters 2-48
		$qsize = 0;
		#/usr/share/haxe/std/haxe/MainLoop.hx:94: characters 2-32
		$p = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:94: characters 2-32
		$q = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:94: characters 2-32
		$e = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:94: characters 2-32
		$tail = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:96: lines 96-138
		while (true) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:97: characters 3-11
			$p = $list;
			#/usr/share/haxe/std/haxe/MainLoop.hx:98: characters 3-14
			$list = null;
			#/usr/share/haxe/std/haxe/MainLoop.hx:99: characters 3-14
			$tail = null;
			#/usr/share/haxe/std/haxe/MainLoop.hx:100: characters 3-14
			$nmerges = 0;
			#/usr/share/haxe/std/haxe/MainLoop.hx:101: lines 101-133
			while ($p !== null) {
				#/usr/share/haxe/std/haxe/MainLoop.hx:102: characters 4-13
				$nmerges = $nmerges + 1;
				#/usr/share/haxe/std/haxe/MainLoop.hx:103: characters 4-9
				$q = $p;
				#/usr/share/haxe/std/haxe/MainLoop.hx:104: characters 4-13
				$psize = 0;
				#/usr/share/haxe/std/haxe/MainLoop.hx:105: lines 105-109
				$_g1 = 0;
				#/usr/share/haxe/std/haxe/MainLoop.hx:105: lines 105-109
				$_g = $insize;
				#/usr/share/haxe/std/haxe/MainLoop.hx:105: lines 105-109
				while ($_g1 < $_g) {
					#/usr/share/haxe/std/haxe/MainLoop.hx:105: lines 105-109
					$_g1 = $_g1 + 1;
					#/usr/share/haxe/std/haxe/MainLoop.hx:105: characters 9-10
					$i = $_g1 - 1;
					#/usr/share/haxe/std/haxe/MainLoop.hx:106: characters 5-12
					$psize = $psize + 1;
					#/usr/share/haxe/std/haxe/MainLoop.hx:107: characters 5-15
					$q = $q->next;
					#/usr/share/haxe/std/haxe/MainLoop.hx:108: characters 5-26
					if ($q === null) {
						#/usr/share/haxe/std/haxe/MainLoop.hx:108: characters 21-26
						break;
					}
				}

				#/usr/share/haxe/std/haxe/MainLoop.hx:110: characters 4-18
				$qsize = $insize;
				#/usr/share/haxe/std/haxe/MainLoop.hx:111: lines 111-131
				while (($psize > 0) || (($qsize > 0) && ($q !== null))) {
					#/usr/share/haxe/std/haxe/MainLoop.hx:112: lines 112-124
					if ($psize === 0) {
						#/usr/share/haxe/std/haxe/MainLoop.hx:113: characters 6-11
						$e = $q;
						#/usr/share/haxe/std/haxe/MainLoop.hx:114: characters 6-16
						$q = $q->next;
						#/usr/share/haxe/std/haxe/MainLoop.hx:115: characters 6-13
						$qsize = $qsize - 1;
					} else if (($qsize === 0) || ($q === null) || (($p->priority > $q->priority) || (($p->priority === $q->priority) && ($p->nextRun <= $q->nextRun)))) {
						#/usr/share/haxe/std/haxe/MainLoop.hx:117: characters 6-11
						$e = $p;
						#/usr/share/haxe/std/haxe/MainLoop.hx:118: characters 6-16
						$p = $p->next;
						#/usr/share/haxe/std/haxe/MainLoop.hx:119: characters 6-13
						$psize = $psize - 1;
					} else {
						#/usr/share/haxe/std/haxe/MainLoop.hx:121: characters 6-11
						$e = $q;
						#/usr/share/haxe/std/haxe/MainLoop.hx:122: characters 6-16
						$q = $q->next;
						#/usr/share/haxe/std/haxe/MainLoop.hx:123: characters 6-13
						$qsize = $qsize - 1;
					}
					#/usr/share/haxe/std/haxe/MainLoop.hx:125: lines 125-128
					if ($tail !== null) {
						#/usr/share/haxe/std/haxe/MainLoop.hx:126: characters 6-19
						$tail->next = $e;
					} else {
						#/usr/share/haxe/std/haxe/MainLoop.hx:128: characters 6-14
						$list = $e;
					}
					#/usr/share/haxe/std/haxe/MainLoop.hx:129: characters 5-18
					$e->prev = $tail;
					#/usr/share/haxe/std/haxe/MainLoop.hx:130: characters 5-13
					$tail = $e;
				}
				#/usr/share/haxe/std/haxe/MainLoop.hx:132: characters 4-9
				$p = $q;
			}
			#/usr/share/haxe/std/haxe/MainLoop.hx:134: characters 3-19
			$tail->next = null;
			#/usr/share/haxe/std/haxe/MainLoop.hx:135: lines 135-136
			if ($nmerges <= 1) {
				#/usr/share/haxe/std/haxe/MainLoop.hx:136: characters 4-9
				break;
			}
			#/usr/share/haxe/std/haxe/MainLoop.hx:137: characters 3-14
			$insize = $insize * 2;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:139: characters 2-18
		$list->prev = null;
		#/usr/share/haxe/std/haxe/MainLoop.hx:140: characters 2-16
		MainLoop::$pending = $list;
	}


	/**
	 * Run the pending events. Return the time for next event.
	 * 
	 * @return float
	 */
	static public function tick () {
		#/usr/share/haxe/std/haxe/MainLoop.hx:147: characters 2-14
		MainLoop::sortEvents();
		#/usr/share/haxe/std/haxe/MainLoop.hx:148: characters 2-18
		$e = MainLoop::$pending;
		#/usr/share/haxe/std/haxe/MainLoop.hx:149: characters 2-31
		$now = microtime(true);
		#/usr/share/haxe/std/haxe/MainLoop.hx:150: characters 2-17
		$wait = 1e9;
		#/usr/share/haxe/std/haxe/MainLoop.hx:151: lines 151-160
		while ($e !== null) {
			#/usr/share/haxe/std/haxe/MainLoop.hx:152: characters 3-21
			$next = $e->next;
			#/usr/share/haxe/std/haxe/MainLoop.hx:153: characters 3-28
			$wt = $e->nextRun - $now;
			#/usr/share/haxe/std/haxe/MainLoop.hx:154: lines 154-158
			if (($e->nextRun < 0) || ($wt <= 0)) {
				#/usr/share/haxe/std/haxe/MainLoop.hx:155: characters 4-12
				$wait = 0;
				#/usr/share/haxe/std/haxe/MainLoop.hx:156: characters 4-12
				if ($e->f !== null) {
					#/usr/share/haxe/std/haxe/MainLoop.hx:156: characters 4-12
					($e->f)();
				}
			} else if ($wait > $wt) {
				#/usr/share/haxe/std/haxe/MainLoop.hx:158: characters 4-13
				$wait = $wt;
			}
			#/usr/share/haxe/std/haxe/MainLoop.hx:159: characters 3-11
			$e = $next;
		}
		#/usr/share/haxe/std/haxe/MainLoop.hx:161: characters 2-13
		return $wait;
	}
}


Boot::registerClass(MainLoop::class, 'haxe.MainLoop');

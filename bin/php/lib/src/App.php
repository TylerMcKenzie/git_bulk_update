<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace src;

use \haxe\io\Path;
use \sys\io\Process;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \src\util\ChunkIterator;
use \src\util\Hub;
use \sys\io\File;
use \sys\FileSystem;

class App extends Cli {
	/**
	 * @var string
	 */
	public $branchname;
	/**
	 * @var int
	 */
	public $chunk;
	/**
	 * @var bool
	 */
	public $createPull;
	/**
	 * @var bool
	 */
	public $diff;
	/**
	 * @var string
	 */
	public $directory;
	/**
	 * @var bool
	 */
	public $dryRun;
	/**
	 * @var string
	 */
	public $fileExtension;
	/**
	 * @var string
	 */
	public $pullRequestMessage;
	/**
	 * @var \Array_hx
	 */
	public $replace;
	/**
	 * @var \Array_hx
	 */
	public $search;


	/**
	 * @return void
	 */
	public function __construct () {
		#src/App.hx:47: characters 8-15
		parent::__construct();
		#src/Cli.hx:19: characters 25-28
		$args = \Sys::args();
		#src/Cli.hx:65: characters 46-160
		$this->directory = ($args->indexOf("-d") > -1 ? ($args->arr[$args->indexOf("-d") + 1] ?? null) : null);
		#src/Cli.hx:65: characters 46-160
		$this->fileExtension = ($args->indexOf("-f") > -1 ? ($args->arr[$args->indexOf("-f") + 1] ?? null) : null);
		#src/Cli.hx:69: characters 71-136
		$_g = new \Array_hx();
		#src/Cli.hx:69: characters 72-135
		$_g2 = 0;
		#src/Cli.hx:69: characters 72-135
		$_g1 = $args->length;
		#src/Cli.hx:69: characters 72-135
		while ($_g2 < $_g1) {
			#src/Cli.hx:69: characters 72-135
			$_g2 = $_g2 + 1;
			#src/Cli.hx:69: characters 77-78
			$i = $_g2 - 1;
			#src/Cli.hx:69: characters 99-135
			if (($args->arr[$i] ?? null) === "-s") {
				#src/Cli.hx:69: characters 126-135
				$_g->arr[$_g->length] = ($args->arr[$i + 1] ?? null);
				#src/Cli.hx:69: characters 126-135
				++$_g->length;
			}
		}

		#src/Cli.hx:69: characters 46-136
		$this->search = $_g;
		#src/Cli.hx:69: characters 71-136
		$_g3 = new \Array_hx();
		#src/Cli.hx:69: characters 72-135
		$_g21 = 0;
		#src/Cli.hx:69: characters 72-135
		$_g11 = $args->length;
		#src/Cli.hx:69: characters 72-135
		while ($_g21 < $_g11) {
			#src/Cli.hx:69: characters 72-135
			$_g21 = $_g21 + 1;
			#src/Cli.hx:69: characters 77-78
			$i1 = $_g21 - 1;
			#src/Cli.hx:69: characters 99-135
			if (($args->arr[$i1] ?? null) === "-r") {
				#src/Cli.hx:69: characters 126-135
				$_g3->arr[$_g3->length] = ($args->arr[$i1 + 1] ?? null);
				#src/Cli.hx:69: characters 126-135
				++$_g3->length;
			}
		}

		#src/Cli.hx:69: characters 46-136
		$this->replace = $_g3;
		#src/Cli.hx:65: characters 46-160
		$this->branchname = ($args->indexOf("-b") > -1 ? ($args->arr[$args->indexOf("-b") + 1] ?? null) : null);
		#src/Cli.hx:53: characters 46-102
		$this->createPull = $args->indexOf("--create-pull") > -1;
		#src/Cli.hx:65: characters 46-160
		$this->pullRequestMessage = ($args->indexOf("--pull-message") > -1 ? ($args->arr[$args->indexOf("--pull-message") + 1] ?? null) : null);
		#src/Cli.hx:78: characters 54-182
		$this->chunk = ($args->indexOf("--chunk") > -1 ? \Std::parseInt(($args->arr[$args->indexOf("--chunk") + 1] ?? null)) : 50);
		#src/Cli.hx:53: characters 46-102
		$this->dryRun = $args->indexOf("--dry") > -1;
		#src/Cli.hx:53: characters 46-102
		$this->diff = $args->indexOf("--diff") > -1;

	}


	/**
	 * @param string $msg
	 * 
	 * @return void
	 */
	public function error ($msg = "") {
		#src/App.hx:127: lines 127-130
		if ($msg === null) {
			#src/App.hx:127: lines 127-130
			$msg = "";
		}
		#src/App.hx:128: characters 8-24
		\Sys::println($msg);
		#src/App.hx:129: characters 8-19
		exit(1);
	}


	/**
	 * @param string $directory
	 * @param \Array_hx $files
	 * 
	 * @return \Array_hx
	 */
	public function getAllFiles ($directory, $files) {
		#src/App.hx:134: lines 134-156
		if (file_exists($directory)) {
			#src/App.hx:135: lines 135-153
			if (is_dir($directory)) {
				#src/App.hx:136: lines 136-150
				$_g = 0;
				#src/App.hx:136: lines 136-150
				$_g1 = FileSystem::readDirectory($directory);
				#src/App.hx:136: lines 136-150
				while ($_g < $_g1->length) {
					#src/App.hx:136: characters 21-25
					$file = ($_g1->arr[$_g] ?? null);
					#src/App.hx:136: lines 136-150
					$_g = $_g + 1;
					#src/App.hx:137: characters 20-64
					$filePath = Path::join(\Array_hx::wrap([
						$directory,
						$file,
					]));
					#src/App.hx:139: lines 139-149
					if (!is_dir($filePath)) {
						#src/App.hx:140: lines 140-146
						if ($this->fileExtension !== null) {
							#src/App.hx:141: lines 141-143
							if (Path::extension($filePath) === $this->fileExtension) {
								#src/App.hx:142: characters 32-52
								$files->arr[$files->length] = $filePath;
								#src/App.hx:142: characters 32-52
								++$files->length;
							}
						} else {
							#src/App.hx:145: characters 28-48
							$files->arr[$files->length] = $filePath;
							#src/App.hx:145: characters 28-48
							++$files->length;
						}
					} else {
						#src/App.hx:148: characters 24-80
						$this->getAllFiles(Path::addTrailingSlash($filePath), $files);
					}
				}
			} else {
				#src/App.hx:152: characters 16-37
				$files->arr[$files->length] = $directory;
				#src/App.hx:152: characters 16-37
				++$files->length;
			}
		} else {
			#src/App.hx:155: characters 11-64
			$this->error("Directory '" . ($directory??'null') . "' does not exist");
		}
		#src/App.hx:158: characters 8-20
		return $files;
	}


	/**
	 * @return int
	 */
	public function getChangedFileCount () {
		#src/App.hx:163: characters 8-70
		$diffProcess = new Process("git", \Array_hx::wrap([
			"diff",
			"--name-only",
		]));
		#src/App.hx:164: characters 8-30
		$diffProcess->exitCode();
		#src/App.hx:165: characters 8-129
		$filesCount = HxString::split($diffProcess->stdout->readAll()->toString(), "\x0A")->filter(function ($f) {
			#src/App.hx:165: characters 98-117
			return strlen($f) > 0;
		})->length;
		#src/App.hx:166: characters 8-27
		$diffProcess->close();
		#src/App.hx:168: characters 8-25
		return $filesCount;
	}


	/**
	 * @return void
	 */
	public function run () {
		#src/App.hx:51: lines 51-124
		$_gthis = $this;
		#src/App.hx:53: lines 53-55
		if ($this->directory === null) {
			#src/App.hx:54: characters 12-52
			$this->error("Test directory is required");
		}
		#src/App.hx:57: lines 57-59
		if ($this->search->length !== $this->replace->length) {
			#src/App.hx:58: characters 12-144
			$this->error("Each search should have an equivalent replace. Got " . ($this->search->length??'null') . " searches and " . ($this->replace->length??'null') . " replaces.");
		}
		#src/App.hx:61: characters 8-74
		$files = $this->getAllFiles($this->directory, new \Array_hx());
		#src/App.hx:63: characters 8-22
		$range = 0;
		#src/App.hx:64: characters 8-73
		$chunkIterator = new ChunkIterator($files, $this->chunk);
		#src/App.hx:66: lines 66-77
		$getFullChunkUpdates = null;
		#src/App.hx:66: lines 66-77
		$getFullChunkUpdates = function ($filesToUpdate)  use (&$chunkIterator, &$_gthis, &$getFullChunkUpdates) {
			#src/App.hx:68: characters 12-82
			$_gthis->searchAndReplaceInFiles($_gthis->search, $_gthis->replace, $filesToUpdate);
			#src/App.hx:70: characters 12-62
			$changedFileCount = $_gthis->getChangedFileCount();
			#src/App.hx:71: lines 71-76
			if ($changedFileCount !== $_gthis->chunk) {
				#src/App.hx:72: characters 40-97
				$chunk = $_gthis->chunk - $changedFileCount;
				#src/App.hx:72: characters 40-97
				$nextChunk = ($chunk !== null ? $chunk : $chunkIterator->chunkSize);
				#src/App.hx:72: characters 40-97
				$start = $chunkIterator->index;
				#src/App.hx:72: characters 40-53
				$chunkIterator1 = $chunkIterator;
				#src/App.hx:72: characters 40-97
				$chunkIterator1->index = $chunkIterator1->index + $nextChunk;
				#src/App.hx:72: characters 16-98
				$nextFilesToUpdate = $chunkIterator->array->slice($start, $chunkIterator1->index);
				#src/App.hx:73: lines 73-75
				if ($nextFilesToUpdate->length > 0) {
					#src/App.hx:74: characters 20-58
					$getFullChunkUpdates($nextFilesToUpdate);
				}
			}
		};
		#src/App.hx:66: lines 66-77
		$getFullChunkUpdates1 = $getFullChunkUpdates;
		#src/App.hx:79: lines 79-123
		$_g = $chunkIterator;
		#src/App.hx:79: lines 79-123
		while ($_g->index < $_g->array->length) {
			#src/App.hx:79: lines 79-123
			$nextChunk1 = $_g->chunkSize;
			#src/App.hx:79: lines 79-123
			$start1 = $_g->index;
			#src/App.hx:79: lines 79-123
			$_g1 = $_g;
			#src/App.hx:79: lines 79-123
			$_g1->index = $_g1->index + $nextChunk1;
			#src/App.hx:79: lines 79-123
			$filesChunk = $_g->array->slice($start1, $_g1->index);
			#src/App.hx:80: lines 80-82
			if ($this->dryRun && !$this->createPull && !$this->diff) {
				#src/App.hx:81: characters 16-83
				$this->searchAndReplaceInFiles($this->search, $this->replace, $filesChunk);
			}
			#src/App.hx:84: lines 84-90
			if ($this->dryRun && $this->diff) {
				#src/App.hx:85: characters 16-47
				$getFullChunkUpdates1($filesChunk);
				#src/App.hx:87: characters 16-44
				\Sys::command("git", \Array_hx::wrap(["diff"]));
				#src/App.hx:88: characters 16-64
				\Sys::command("git", \Array_hx::wrap([
					"checkout",
					$this->directory,
				]));
				#src/App.hx:89: characters 16-22
				return;
			}
			#src/App.hx:93: lines 93-122
			if ($this->createPull && !$this->dryRun) {
				#src/App.hx:94: characters 16-34
				$start2 = $range;
				#src/App.hx:95: characters 26-45
				$range = $range + $this->chunk;
				#src/App.hx:95: characters 16-46
				$end = $range;
				#src/App.hx:97: characters 16-117
				if ($this->branchname === null) {
					#src/App.hx:97: characters 45-117
					$this->error("'-b' branch flag is required when creating a pull request.");
				}
				#src/App.hx:101: characters 16-86
				$branchnameRange = ($this->branchname??'null') . "_batch_" . ($start2??'null') . "_" . ($end??'null');
				#src/App.hx:103: lines 103-121
				if ((new Process("git", \Array_hx::wrap([
					"checkout",
					"-b",
					$branchnameRange,
					"master",
				])))->exitCode() === 0) {
					#src/App.hx:105: characters 20-51
					$getFullChunkUpdates1($filesChunk);
					#src/App.hx:107: characters 20-109
					(new Process("git", \Array_hx::wrap([
						"commit",
						"-am",
						"Adding update for batch " . ($start2??'null') . " - " . ($end??'null'),
					])))->exitCode();
					#src/App.hx:108: characters 20-92
					(new Process("git", \Array_hx::wrap([
						"push",
						"-u",
						"origin",
						$branchnameRange,
					])))->exitCode();
					#src/App.hx:110: characters 20-99
					$message = ($this->pullRequestMessage !== null ? $this->pullRequestMessage : "");
					#src/App.hx:112: lines 112-116
					Hub::pullRequest(\Array_hx::wrap([
						"-m",
						"Update batch " . ($start2??'null') . " - " . ($end??'null'),
						"-m",
						$message,
					]), function ($process) {
						#src/App.hx:113: characters 24-70
						echo(\Std::string($process->stdout->readAll()->toString()));
						#src/App.hx:114: characters 24-42
						$process->exitCode();
						#src/App.hx:115: characters 24-39
						$process->close();
					});
					#src/App.hx:118: characters 20-68
					(new Process("git", \Array_hx::wrap([
						"checkout",
						"-",
					])))->exitCode();
				} else {
					#src/App.hx:120: characters 20-81
					$this->error("Could not checkout branch '" . ($branchnameRange??'null') . "'.");
				}
			}
		}

	}


	/**
	 * @param string $search
	 * @param string $replace
	 * @param string $filePath
	 * 
	 * @return void
	 */
	public function searchAndReplaceInFile ($search = "", $replace = "", $filePath) {
		#src/App.hx:172: lines 172-195
		if ($search === null) {
			#src/App.hx:172: lines 172-195
			$search = "";
		}
		#src/App.hx:172: lines 172-195
		if ($replace === null) {
			#src/App.hx:172: lines 172-195
			$replace = "";
		}
		#src/App.hx:173: lines 173-175
		if (!file_exists($filePath)) {
			#src/App.hx:174: characters 12-60
			$this->error("File: '" . ($filePath??'null') . "' does not exist");
		}
		#src/App.hx:177: lines 177-182
		if ((strlen($search) === 0) || (strlen($replace) === 0)) {
			#src/App.hx:181: characters 12-57
			$this->error("Search and Replace are required");
		}
		#src/App.hx:184: characters 8-52
		$fileContent = File::getContent($filePath);
		#src/App.hx:185: characters 8-48
		$searchRegex = new \EReg($search, "g");
		#src/App.hx:186: characters 8-50
		$newLineRegex = new \EReg("\\\\n", "g");
		#src/App.hx:188: characters 8-99
		$updatedContent = $searchRegex->replace($fileContent, $newLineRegex->replace($replace, "\x0A"));
		#src/App.hx:190: lines 190-194
		try {
			#src/App.hx:191: characters 12-54
			File::saveContent($filePath, $updatedContent);
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if (is_string($__hx__real_e)) {
				$errorMessage = $__hx__real_e;
				#src/App.hx:193: characters 12-36
				$this->error($errorMessage);
			} else  throw $__hx__caught_e;
		}
	}


	/**
	 * @param \Array_hx $searches
	 * @param \Array_hx $replaces
	 * @param \Array_hx $files
	 * 
	 * @return void
	 */
	public function searchAndReplaceInFiles ($searches, $replaces, $files) {
		#src/App.hx:199: lines 199-203
		$_g = 0;
		#src/App.hx:199: lines 199-203
		while ($_g < $files->length) {
			#src/App.hx:199: characters 13-17
			$file = ($files->arr[$_g] ?? null);
			#src/App.hx:199: lines 199-203
			$_g = $_g + 1;
			#src/App.hx:200: lines 200-202
			$_g2 = 0;
			#src/App.hx:200: lines 200-202
			$_g1 = $searches->length;
			#src/App.hx:200: lines 200-202
			while ($_g2 < $_g1) {
				#src/App.hx:200: lines 200-202
				$_g2 = $_g2 + 1;
				#src/App.hx:200: characters 17-18
				$i = $_g2 - 1;
				#src/App.hx:201: characters 16-75
				$this->searchAndReplaceInFile(($searches->arr[$i] ?? null), ($replaces->arr[$i] ?? null), $file);
			}

		}
	}
}


Boot::registerClass(App::class, 'src.App');

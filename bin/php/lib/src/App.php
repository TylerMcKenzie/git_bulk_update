<?php
/**
 * Generated by Haxe 3.4.7
 */

namespace src;

use \haxe\io\Path;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\Log;
use \sys\io\File;
use \php\_Boot\HxAnon;
use \sys\FileSystem;

class App {
	/**
	 * @var string
	 */
	public $branchname;
	/**
	 * @var string
	 */
	public $directory;
	/**
	 * @var string
	 */
	public $fileExtension;
	/**
	 * @var string
	 */
	public $pullRequestMessage;
	/**
	 * @var string
	 */
	public $replace;
	/**
	 * @var string
	 */
	public $search;


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param string $msg
	 * 
	 * @return void
	 */
	public function error ($msg = "") {
		#src/App.hx:80: lines 80-83
		if ($msg === null) {
			#src/App.hx:80: lines 80-83
			$msg = "";
		}
		#src/App.hx:81: characters 8-24
		\Sys::println($msg);
		#src/App.hx:82: characters 8-19
		exit(1);
	}


	/**
	 * @param string $directory
	 * @param \Array_hx $files
	 * 
	 * @return \Array_hx
	 */
	public function getAllFiles ($directory, $files) {
		#src/App.hx:87: lines 87-105
		if (file_exists($directory)) {
			#src/App.hx:88: lines 88-102
			if (is_dir($directory)) {
				#src/App.hx:89: lines 89-99
				$_g = 0;
				#src/App.hx:89: lines 89-99
				$_g1 = FileSystem::readDirectory($directory);
				#src/App.hx:89: lines 89-99
				while ($_g < $_g1->length) {
					#src/App.hx:89: characters 21-25
					$file = ($_g1->arr[$_g] ?? null);
					#src/App.hx:89: lines 89-99
					$_g = $_g + 1;
					#src/App.hx:90: characters 20-64
					$filePath = Path::join(\Array_hx::wrap([
						$directory,
						$file,
					]));
					#src/App.hx:92: lines 92-98
					if (!is_dir($filePath)) {
						#src/App.hx:93: lines 93-95
						if (Path::extension($filePath) === $this->fileExtension) {
							#src/App.hx:94: characters 28-48
							$files->arr[$files->length] = $filePath;
							#src/App.hx:94: characters 28-48
							++$files->length;
						}
					} else {
						#src/App.hx:97: characters 24-80
						$this->getAllFiles(Path::addTrailingSlash($filePath), $files);
					}
				}
			} else {
				#src/App.hx:101: characters 16-37
				$files->arr[$files->length] = $directory;
				#src/App.hx:101: characters 16-37
				++$files->length;
			}
		} else {
			#src/App.hx:104: characters 11-64
			$this->error("Directory '" . ($directory??'null') . "' does not exist");
		}
		#src/App.hx:107: characters 8-20
		return $files;
	}


	/**
	 * @param string $rest
	 * 
	 * @return void
	 */
	public function run ($rest) {
		#src/App.hx:37: characters 8-13
		(Log::$trace)($this->directory, new HxAnon([
			"fileName" => "App.hx",
			"lineNumber" => 37,
			"className" => "src.App",
			"methodName" => "run",
		]));
		#src/App.hx:38: characters 8-13
		(Log::$trace)($rest, new HxAnon([
			"fileName" => "App.hx",
			"lineNumber" => 38,
			"className" => "src.App",
			"methodName" => "run",
		]));
		#src/App.hx:39: lines 39-41
		if ($this->directory === null) {
			#src/App.hx:40: characters 12-52
			$this->error("Test directory is required");
		}
		#src/App.hx:42: characters 8-14
		return;
	}


	/**
	 * @param string $search
	 * @param string $replace
	 * @param string $filePath
	 * 
	 * @return void
	 */
	public function searchAndReplaceInFile ($search = "", $replace = "", $filePath) {
		#src/App.hx:111: lines 111-134
		if ($search === null) {
			#src/App.hx:111: lines 111-134
			$search = "";
		}
		#src/App.hx:111: lines 111-134
		if ($replace === null) {
			#src/App.hx:111: lines 111-134
			$replace = "";
		}
		#src/App.hx:112: lines 112-114
		if (!file_exists($filePath)) {
			#src/App.hx:113: characters 12-60
			$this->error("File: '" . ($filePath??'null') . "' does not exist");
		}
		#src/App.hx:116: lines 116-121
		if ((strlen($search) === 0) || (strlen($replace) === 0)) {
			#src/App.hx:120: characters 12-57
			$this->error("Search and Replace are required");
		}
		#src/App.hx:123: characters 8-52
		$fileContent = File::getContent($filePath);
		#src/App.hx:124: characters 8-48
		$searchRegex = new \EReg($search, "g");
		#src/App.hx:125: characters 8-50
		$newLineRegex = new \EReg("\\\\n", "g");
		#src/App.hx:127: characters 8-99
		$updatedContent = $searchRegex->replace($fileContent, $newLineRegex->replace($replace, "\x0A"));
		#src/App.hx:129: lines 129-133
		try {
			#src/App.hx:130: characters 12-54
			File::saveContent($filePath, $updatedContent);
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if (is_string($__hx__real_e)) {
				$errorMessage = $__hx__real_e;
				#src/App.hx:132: characters 12-36
				$this->error($errorMessage);
			} else  throw $__hx__caught_e;
		}
	}
}


Boot::registerClass(App::class, 'src.App');

<?php
/**
 * Generated by Haxe 3.4.7
 */

use \_Array\ArrayIterator;
use \php\_Boot\HxException;
use \php\Boot;

final /**
 * An Array is a storage for values. You can access it using indexes or
 * with its API.
 * @see https://haxe.org/manual/std-Array.html
 * @see https://haxe.org/manual/lf-array-comprehension.html
 */
class Array_hx implements \ArrayAccess {
	/**
	 * @var mixed
	 */
	public $arr;
	/**
	 * @var int
	 * The length of `this` Array.
	 */
	public $length;


	/**
	 * @param mixed $arr
	 * 
	 * @return Array_hx
	 */
	static public function wrap ($arr) {
		#/usr/share/haxe/std/php7/_std/Array.hx:201: characters 2-22
		$a = new Array_hx();
		#/usr/share/haxe/std/php7/_std/Array.hx:202: characters 2-13
		$a->arr = $arr;
		#/usr/share/haxe/std/php7/_std/Array.hx:203: characters 2-30
		$a->length = count($arr);
		#/usr/share/haxe/std/php7/_std/Array.hx:204: characters 2-10
		return $a;
	}


	/**
	 * Creates a new Array.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/usr/share/haxe/std/php7/_std/Array.hx:33: characters 8-35
		$this1 = [];
		#/usr/share/haxe/std/php7/_std/Array.hx:33: characters 2-35
		$this->arr = $this1;
		#/usr/share/haxe/std/php7/_std/Array.hx:34: characters 2-12
		$this->length = 0;
	}


	/**
	 * Returns a new Array by appending the elements of `a` to the elements of
	 * `this` Array.
	 * This operation does not modify `this` Array.
	 * If `a` is the empty Array `[]`, a copy of `this` Array is returned.
	 * The length of the returned Array is equal to the sum of `this.length`
	 * and `a.length`.
	 * If `a` is `null`, the result is unspecified.
	 * 
	 * @param Array_hx $a
	 * 
	 * @return Array_hx
	 */
	public function concat ($a) {
		#/usr/share/haxe/std/php7/_std/Array.hx:38: characters 2-45
		return Array_hx::wrap(array_merge($this->arr, $a->arr));
	}


	/**
	 * Returns a shallow copy of `this` Array.
	 * The elements are not copied and retain their identity, so
	 * `a[i] == a.copy()[i]` is true for any valid `i`. However,
	 * `a == a.copy()` is always false.
	 * 
	 * @return Array_hx
	 */
	public function copy () {
		#/usr/share/haxe/std/php7/_std/Array.hx:42: characters 2-18
		return Array_hx::wrap($this->arr);
	}


	/**
	 * Returns an Array containing those elements of `this` for which `f`
	 * returned true.
	 * The individual elements are not duplicated and retain their identity.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param \Closure $f
	 * 
	 * @return Array_hx
	 */
	public function filter ($f) {
		#/usr/share/haxe/std/php7/_std/Array.hx:46: characters 2-63
		return Array_hx::wrap(array_values(array_filter($this->arr, $f)));
	}


	/**
	 * Returns position of the first occurrence of `x` in `this` Array, searching front to back.
	 * If `x` is found by checking standard equality, the function returns its index.
	 * If `x` is not found, the function returns -1.
	 * If `fromIndex` is specified, it will be used as the starting index to search from,
	 * otherwise search starts with zero index. If it is negative, it will be taken as the
	 * offset from the end of `this` Array to compute the starting index. If given or computed
	 * starting index is less than 0, the whole array will be searched, if it is greater than
	 * or equal to the length of `this` Array, the function returns -1.
	 * 
	 * @param mixed $x
	 * @param int $fromIndex
	 * 
	 * @return int
	 */
	public function indexOf ($x, $fromIndex = null) {
		#/usr/share/haxe/std/php7/_std/Array.hx:50: lines 50-57
		if ($fromIndex === null) {
			#/usr/share/haxe/std/php7/_std/Array.hx:51: characters 3-49
			$index = array_search($x, $this->arr, true);
			#/usr/share/haxe/std/php7/_std/Array.hx:52: lines 52-56
			if ($index === false) {
				#/usr/share/haxe/std/php7/_std/Array.hx:53: characters 4-13
				return -1;
			} else {
				#/usr/share/haxe/std/php7/_std/Array.hx:55: characters 4-16
				return $index;
			}
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:58: characters 2-40
		if ($fromIndex < 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:58: characters 21-40
			$fromIndex = $fromIndex + $this->length;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:59: characters 2-34
		if ($fromIndex < 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:59: characters 21-34
			$fromIndex = 0;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:60: lines 60-64
		while ($fromIndex < $this->length) {
			#/usr/share/haxe/std/php7/_std/Array.hx:61: lines 61-62
			if (Boot::equal($this->arr[$fromIndex], $x)) {
				#/usr/share/haxe/std/php7/_std/Array.hx:62: characters 4-20
				return $fromIndex;
			}
			#/usr/share/haxe/std/php7/_std/Array.hx:63: characters 3-14
			$fromIndex = $fromIndex + 1;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:65: characters 2-11
		return -1;
	}


	/**
	 * Inserts the element `x` at the position `pos`.
	 * This operation modifies `this` Array in place.
	 * The offset is calculated like so:
	 * - If `pos` exceeds `this.length`, the offset is `this.length`.
	 * - If `pos` is negative, the offset is calculated from the end of `this`
	 * Array, i.e. `this.length + pos`. If this yields a negative value, the
	 * offset is 0.
	 * - Otherwise, the offset is `pos`.
	 * If the resulting offset does not exceed `this.length`, all elements from
	 * and including that offset to the end of `this` Array are moved one index
	 * ahead.
	 * 
	 * @param int $pos
	 * @param mixed $x
	 * 
	 * @return void
	 */
	public function insert ($pos, $x) {
		#/usr/share/haxe/std/php7/_std/Array.hx:69: characters 2-10
		$this->length++;
		#/usr/share/haxe/std/php7/_std/Array.hx:70: characters 2-55
		array_splice($this->arr, $pos, 0, [$x]);
	}


	/**
	 * Returns an iterator of the Array values.
	 * 
	 * @return object
	 */
	public function iterator () {
		#/usr/share/haxe/std/php7/_std/Array.hx:75: characters 2-32
		return new ArrayIterator($this);
	}


	/**
	 * Returns a string representation of `this` Array, with `sep` separating
	 * each element.
	 * The result of this operation is equal to `Std.string(this[0]) + sep +
	 * Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`
	 * If `this` is the empty Array `[]`, the result is the empty String `""`.
	 * If `this` has exactly one element, the result is equal to a call to
	 * `Std.string(this[0])`.
	 * If `sep` is null, the result is unspecified.
	 * 
	 * @param string $sep
	 * 
	 * @return string
	 */
	public function join ($sep) {
		#/usr/share/haxe/std/php7/_std/Array.hx:79: characters 2-61
		return implode($sep, array_map("strval", $this->arr));
	}


	/**
	 * Returns position of the last occurrence of `x` in `this` Array, searching back to front.
	 * If `x` is found by checking standard equality, the function returns its index.
	 * If `x` is not found, the function returns -1.
	 * If `fromIndex` is specified, it will be used as the starting index to search from,
	 * otherwise search starts with the last element index. If it is negative, it will be
	 * taken as the offset from the end of `this` Array to compute the starting index. If
	 * given or computed starting index is greater than or equal to the length of `this` Array,
	 * the whole array will be searched, if it is less than 0, the function returns -1.
	 * 
	 * @param mixed $x
	 * @param int $fromIndex
	 * 
	 * @return int
	 */
	public function lastIndexOf ($x, $fromIndex = null) {
		#/usr/share/haxe/std/php7/_std/Array.hx:83: characters 2-70
		if (($fromIndex === null) || ($fromIndex >= $this->length)) {
			#/usr/share/haxe/std/php7/_std/Array.hx:83: characters 48-70
			$fromIndex = $this->length - 1;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:84: characters 2-40
		if ($fromIndex < 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:84: characters 21-40
			$fromIndex = $fromIndex + $this->length;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:85: lines 85-89
		while ($fromIndex >= 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:86: lines 86-87
			if (Boot::equal($this->arr[$fromIndex], $x)) {
				#/usr/share/haxe/std/php7/_std/Array.hx:87: characters 4-20
				return $fromIndex;
			}
			#/usr/share/haxe/std/php7/_std/Array.hx:88: characters 3-14
			$fromIndex = $fromIndex - 1;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:90: characters 2-11
		return -1;
	}


	/**
	 * Creates a new Array by applying function `f` to all elements of `this`.
	 * The order of elements is preserved.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param \Closure $f
	 * 
	 * @return Array_hx
	 */
	public function map ($f) {
		#/usr/share/haxe/std/php7/_std/Array.hx:94: characters 2-34
		$result = [];
		#/usr/share/haxe/std/php7/_std/Array.hx:95: lines 95-97
		$_g1 = 0;
		#/usr/share/haxe/std/php7/_std/Array.hx:95: lines 95-97
		$_g = $this->length;
		#/usr/share/haxe/std/php7/_std/Array.hx:95: lines 95-97
		while ($_g1 < $_g) {
			#/usr/share/haxe/std/php7/_std/Array.hx:95: lines 95-97
			$_g1 = $_g1 + 1;
			#/usr/share/haxe/std/php7/_std/Array.hx:95: characters 6-7
			$i = $_g1 - 1;
			#/usr/share/haxe/std/php7/_std/Array.hx:96: characters 3-24
			$result[$i] = $f($this->arr[$i]);
		}

		#/usr/share/haxe/std/php7/_std/Array.hx:98: characters 2-21
		return Array_hx::wrap($result);
	}


	/**
	 * @param int $offset
	 * 
	 * @return bool
	 */
	public function offsetExists ($offset) {
		#/usr/share/haxe/std/php7/_std/Array.hx:171: characters 2-24
		return $offset < $this->length;
	}


	/**
	 * @param int $offset
	 * 
	 * @return mixed
	 */
	public function &offsetGet ($offset) {
		#/usr/share/haxe/std/php7/_std/Array.hx:176: lines 176-180
		try {
			#/usr/share/haxe/std/php7/_std/Array.hx:177: characters 10-21
			return $this->arr[$offset];
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/share/haxe/std/php7/_std/Array.hx:179: characters 3-14
			return null;
		}
	}


	/**
	 * @param int $offset
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function offsetSet ($offset, $value) {
		#/usr/share/haxe/std/php7/_std/Array.hx:185: lines 185-188
		if ($this->length <= $offset) {
			#/usr/share/haxe/std/php7/_std/Array.hx:186: characters 3-81
			$this->arr = array_merge($this->arr, array_fill(0, $offset + 1 - $this->length, null));
			#/usr/share/haxe/std/php7/_std/Array.hx:187: characters 3-22
			$this->length = $offset + 1;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:189: characters 2-21
		$this->arr[$offset] = $value;
	}


	/**
	 * @param int $offset
	 * 
	 * @return void
	 */
	public function offsetUnset ($offset) {
		#/usr/share/haxe/std/php7/_std/Array.hx:194: lines 194-197
		if (($offset >= 0) && ($offset < $this->length)) {
			#/usr/share/haxe/std/php7/_std/Array.hx:195: characters 3-38
			array_splice($this->arr, $offset, 1);
			#/usr/share/haxe/std/php7/_std/Array.hx:196: characters 3-11
			--$this->length;
		}
	}


	/**
	 * Removes the last element of `this` Array and returns it.
	 * This operation modifies `this` Array in place.
	 * If `this` has at least one element, `this.length` will decrease by 1.
	 * If `this` is the empty Array `[]`, null is returned and the length
	 * remains 0.
	 * 
	 * @return mixed
	 */
	public function pop () {
		#/usr/share/haxe/std/php7/_std/Array.hx:102: characters 2-26
		if ($this->length > 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:102: characters 18-26
			$this->length--;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:103: characters 2-30
		return array_pop($this->arr);
	}


	/**
	 * Adds the element `x` at the end of `this` Array and returns the new
	 * length of `this` Array.
	 * This operation modifies `this` Array in place.
	 * `this.length` increases by 1.
	 * 
	 * @param mixed $x
	 * 
	 * @return int
	 */
	public function push ($x) {
		#/usr/share/haxe/std/php7/_std/Array.hx:107: characters 2-17
		$this->arr[$this->length] = $x;
		#/usr/share/haxe/std/php7/_std/Array.hx:108: characters 2-17
		return ++$this->length;
	}


	/**
	 * Removes the first occurrence of `x` in `this` Array.
	 * This operation modifies `this` Array in place.
	 * If `x` is found by checking standard equality, it is removed from `this`
	 * Array and all following elements are reindexed accordingly. The function
	 * then returns true.
	 * If `x` is not found, `this` Array is not changed and the function
	 * returns false.
	 * 
	 * @param mixed $x
	 * 
	 * @return bool
	 */
	public function remove ($x) {
		#/usr/share/haxe/std/php7/_std/Array.hx:112: lines 112-118
		$_g1 = 0;
		#/usr/share/haxe/std/php7/_std/Array.hx:112: lines 112-118
		$_g = $this->length;
		#/usr/share/haxe/std/php7/_std/Array.hx:112: lines 112-118
		while ($_g1 < $_g) {
			#/usr/share/haxe/std/php7/_std/Array.hx:112: lines 112-118
			$_g1 = $_g1 + 1;
			#/usr/share/haxe/std/php7/_std/Array.hx:112: characters 7-8
			$i = $_g1 - 1;
			#/usr/share/haxe/std/php7/_std/Array.hx:113: lines 113-117
			if (Boot::equal($this->arr[$i], $x)) {
				#/usr/share/haxe/std/php7/_std/Array.hx:114: characters 4-34
				array_splice($this->arr, $i, 1);
				#/usr/share/haxe/std/php7/_std/Array.hx:115: characters 4-12
				$this->length--;
				#/usr/share/haxe/std/php7/_std/Array.hx:116: characters 4-15
				return true;
			}
		}

		#/usr/share/haxe/std/php7/_std/Array.hx:119: characters 2-14
		return false;
	}


	/**
	 * Reverse the order of elements of `this` Array.
	 * This operation modifies `this` Array in place.
	 * If `this.length < 2`, `this` remains unchanged.
	 * 
	 * @return void
	 */
	public function reverse () {
		#/usr/share/haxe/std/php7/_std/Array.hx:123: characters 2-33
		$this->arr = array_reverse($this->arr);
	}


	/**
	 * Removes the first element of `this` Array and returns it.
	 * This operation modifies `this` Array in place.
	 * If `this` has at least one element, `this`.length and the index of each
	 * remaining element is decreased by 1.
	 * If `this` is the empty Array `[]`, `null` is returned and the length
	 * remains 0.
	 * 
	 * @return mixed
	 */
	public function shift () {
		#/usr/share/haxe/std/php7/_std/Array.hx:127: characters 2-26
		if ($this->length > 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:127: characters 18-26
			$this->length--;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:128: characters 2-32
		return array_shift($this->arr);
	}


	/**
	 * Creates a shallow copy of the range of `this` Array, starting at and
	 * including `pos`, up to but not including `end`.
	 * This operation does not modify `this` Array.
	 * The elements are not copied and retain their identity.
	 * If `end` is omitted or exceeds `this.length`, it defaults to the end of
	 * `this` Array.
	 * If `pos` or `end` are negative, their offsets are calculated from the
	 * end of `this` Array by `this.length + pos` and `this.length + end`
	 * respectively. If this yields a negative value, 0 is used instead.
	 * If `pos` exceeds `this.length` or if `end` is less than or equals
	 * `pos`, the result is `[]`.
	 * 
	 * @param int $pos
	 * @param int $end
	 * 
	 * @return Array_hx
	 */
	public function slice ($pos, $end = null) {
		#/usr/share/haxe/std/php7/_std/Array.hx:132: characters 2-28
		if ($pos < 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:132: characters 15-28
			$pos = $pos + $this->length;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:133: characters 2-22
		if ($pos < 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:133: characters 15-22
			$pos = 0;
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:134: lines 134-143
		if ($end === null) {
			#/usr/share/haxe/std/php7/_std/Array.hx:135: characters 3-44
			return Array_hx::wrap(array_slice($this->arr, $pos));
		} else {
			#/usr/share/haxe/std/php7/_std/Array.hx:137: characters 3-29
			if ($end < 0) {
				#/usr/share/haxe/std/php7/_std/Array.hx:137: characters 16-29
				$end = $end + $this->length;
			}
			#/usr/share/haxe/std/php7/_std/Array.hx:138: lines 138-142
			if ($end <= $pos) {
				#/usr/share/haxe/std/php7/_std/Array.hx:139: characters 4-13
				return new Array_hx();
			} else {
				#/usr/share/haxe/std/php7/_std/Array.hx:141: characters 4-56
				return Array_hx::wrap(array_slice($this->arr, $pos, $end - $pos));
			}
		}
	}


	/**
	 * Sorts `this` Array according to the comparison function `f`, where
	 * `f(x,y)` returns 0 if x == y, a positive Int if x > y and a
	 * negative Int if x < y.
	 * This operation modifies `this` Array in place.
	 * The sort operation is not guaranteed to be stable, which means that the
	 * order of equal elements may not be retained. For a stable Array sorting
	 * algorithm, `haxe.ds.ArraySort.sort()` can be used instead.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	public function sort ($f) {
		#/usr/share/haxe/std/php7/_std/Array.hx:147: characters 2-14
		usort($this->arr, $f);
	}


	/**
	 * Removes `len` elements from `this` Array, starting at and including
	 * `pos`, an returns them.
	 * This operation modifies `this` Array in place.
	 * If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
	 * returned and `this` Array is unchanged.
	 * If `pos` is negative, its value is calculated from the end	of `this`
	 * Array by `this.length + pos`. If this yields a negative value, 0 is
	 * used instead.
	 * If the sum of the resulting values for `len` and `pos` exceed
	 * `this.length`, this operation will affect the elements from `pos` to the
	 * end of `this` Array.
	 * The length of the returned Array is equal to the new length of `this`
	 * Array subtracted from the original length of `this` Array. In other
	 * words, each element of the original `this` Array either remains in
	 * `this` Array or becomes an element of the returned Array.
	 * 
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return Array_hx
	 */
	public function splice ($pos, $len) {
		#/usr/share/haxe/std/php7/_std/Array.hx:151: characters 2-24
		if ($len < 0) {
			#/usr/share/haxe/std/php7/_std/Array.hx:151: characters 15-24
			return new Array_hx();
		}
		#/usr/share/haxe/std/php7/_std/Array.hx:152: characters 2-56
		$result = Array_hx::wrap(array_splice($this->arr, $pos, $len));
		#/usr/share/haxe/std/php7/_std/Array.hx:153: characters 2-8
		$tmp = $this;
		#/usr/share/haxe/std/php7/_std/Array.hx:153: characters 2-25
		$tmp->length = $tmp->length - $result->length;
		#/usr/share/haxe/std/php7/_std/Array.hx:154: characters 2-15
		return $result;
	}


	/**
	 * Returns a string representation of `this` Array.
	 * The result will include the individual elements' String representations
	 * separated by comma. The enclosing [ ] may be missing on some platforms,
	 * use `Std.string()` to get a String representation that is consistent
	 * across platforms.
	 * 
	 * @return string
	 */
	public function toString () {
		#/usr/share/haxe/std/php7/_std/Array.hx:162: characters 2-35
		$strings = [];
		#/usr/share/haxe/std/php7/_std/Array.hx:163: lines 163-165
		foreach (($this->arr) as $index => $value) {
			#/usr/share/haxe/std/php7/_std/Array.hx:164: characters 3-41
			$val = Boot::stringify($value);
			#/usr/share/haxe/std/php7/_std/Array.hx:164: characters 3-41
			$strings[$index] = $val;
		};
		#/usr/share/haxe/std/php7/_std/Array.hx:166: characters 2-49
		return "[" . (implode(",", $strings)??'null') . "]";
	}


	/**
	 * Adds the element `x` at the start of `this` Array.
	 * This operation modifies `this` Array in place.
	 * `this.length` and the index of each Array element increases by 1.
	 * 
	 * @param mixed $x
	 * 
	 * @return void
	 */
	public function unshift ($x) {
		#/usr/share/haxe/std/php7/_std/Array.hx:158: characters 2-39
		$this->length = array_unshift($this->arr, $x);
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(Array_hx::class, 'Array');

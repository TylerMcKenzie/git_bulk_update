// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_src_App
#include <src/App.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9aa8d6444802cb78_13_new,"src.App","new",0x5207d669,"src.App.new","App.hx",13,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9aa8d6444802cb78_21_run,"src.App","run",0x520aed54,"src.App.run","App.hx",21,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9aa8d6444802cb78_34_error,"src.App","error",0x9e722611,"src.App.error","App.hx",34,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9aa8d6444802cb78_40_getAllFiles,"src.App","getAllFiles",0x58171755,"src.App.getAllFiles","App.hx",40,0xc43e94dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9aa8d6444802cb78_59_searchAndReplaceInFile,"src.App","searchAndReplaceInFile",0x3c42f21d,"src.App.searchAndReplaceInFile","App.hx",59,0xc43e94dd)
namespace src{

void App_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9aa8d6444802cb78_13_new)
HXLINE(  14)		::Array< ::String > args = ::Sys_obj::args();
HXLINE(  15)		this->directory = args->__get((int)0);
HXLINE(  16)		this->search = args->__get((int)1);
HXLINE(  17)		this->replace = args->__get((int)2);
            	}

Dynamic App_obj::__CreateEmpty() { return new App_obj; }

void *App_obj::_hx_vtable = 0;

Dynamic App_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< App_obj > _hx_result = new App_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool App_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5752985d;
}

void App_obj::run(){
            	HX_STACKFRAME(&_hx_pos_9aa8d6444802cb78_21_run)
HXLINE(  22)		if (hx::IsNull( this->directory )) {
HXLINE(  23)			this->error(HX_("Test directory is required",f4,43,19,c2));
            		}
HXLINE(  26)		::String files = this->directory;
HXDLIN(  26)		::Array< ::String > files1 = this->getAllFiles(files,::Array_obj< ::String >::__new());
HXLINE(  28)		{
HXLINE(  28)			int _g = (int)0;
HXDLIN(  28)			while((_g < files1->length)){
HXLINE(  28)				::String file = files1->__get(_g);
HXDLIN(  28)				_g = (_g + (int)1);
HXLINE(  29)				this->searchAndReplaceInFile(this->search,this->replace,file);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,run,(void))

void App_obj::error(::String __o_msg){
::String msg = __o_msg.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9aa8d6444802cb78_34_error)
HXLINE(  35)		::Sys_obj::println(msg);
HXLINE(  36)		::Sys_obj::exit((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,error,(void))

::Array< ::String > App_obj::getAllFiles(::String directory,::Array< ::String > files){
            	HX_STACKFRAME(&_hx_pos_9aa8d6444802cb78_40_getAllFiles)
HXLINE(  41)		if (::sys::FileSystem_obj::exists(directory)) {
HXLINE(  42)			int _g = (int)0;
HXDLIN(  42)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN(  42)			while((_g < _g1->length)){
HXLINE(  42)				::String file = _g1->__get(_g);
HXDLIN(  42)				_g = (_g + (int)1);
HXLINE(  43)				::String filePath = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file));
HXLINE(  45)				if (!(::sys::FileSystem_obj::isDirectory(filePath))) {
HXLINE(  46)					files->push(filePath);
            				}
            				else {
HXLINE(  48)					this->getAllFiles(::haxe::io::Path_obj::addTrailingSlash(filePath),files);
            				}
            			}
            		}
            		else {
HXLINE(  52)			this->error(((HX_("Directory '",94,db,6a,45) + directory) + HX_("' does not exist",9c,d9,8e,aa)));
            		}
HXLINE(  55)		return files;
            	}


HX_DEFINE_DYNAMIC_FUNC2(App_obj,getAllFiles,return )

void App_obj::searchAndReplaceInFile(::String __o_search,::String __o_replace,::String filePath){
::String search = __o_search.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String replace = __o_replace.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_9aa8d6444802cb78_59_searchAndReplaceInFile)
HXLINE(  60)		if (!(::sys::FileSystem_obj::exists(filePath))) {
HXLINE(  61)			this->error(((HX_("File: '",a5,ad,8c,cc) + filePath) + HX_("' does not exist",9c,d9,8e,aa)));
            		}
HXLINE(  65)		bool _hx_tmp;
HXDLIN(  65)		if ((search.length != (int)0)) {
HXLINE(  65)			_hx_tmp = (replace.length == (int)0);
            		}
            		else {
HXLINE(  65)			_hx_tmp = true;
            		}
HXLINE(  64)		if (_hx_tmp) {
HXLINE(  68)			this->error(HX_("Search and Replace are required",b8,23,66,c5));
            		}
HXLINE(  71)		::String fileContent = ::sys::io::File_obj::getContent(filePath);
HXLINE(  72)		 ::EReg searchRegex =  ::EReg_obj::__alloc( HX_CTX ,search,HX_("g",67,00,00,00));
HXLINE(  73)		 ::EReg newLineRegex =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\\\n",ee,1f,46,00),HX_("g",67,00,00,00));
HXLINE(  75)		::String updatedString = searchRegex->replace(fileContent,newLineRegex->replace(replace,HX_("\n",0a,00,00,00)));
HXLINE(  77)		::Sys_obj::print(updatedString);
            	}


HX_DEFINE_DYNAMIC_FUNC3(App_obj,searchAndReplaceInFile,(void))


hx::ObjectPtr< App_obj > App_obj::__new() {
	hx::ObjectPtr< App_obj > __this = new App_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< App_obj > App_obj::__alloc(hx::Ctx *_hx_ctx) {
	App_obj *__this = (App_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(App_obj), true, "src.App"));
	*(void **)__this = App_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

App_obj::App_obj()
{
}

void App_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(App);
	HX_MARK_MEMBER_NAME(directory,"directory");
	HX_MARK_MEMBER_NAME(search,"search");
	HX_MARK_MEMBER_NAME(replace,"replace");
	HX_MARK_END_CLASS();
}

void App_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(directory,"directory");
	HX_VISIT_MEMBER_NAME(search,"search");
	HX_VISIT_MEMBER_NAME(replace,"replace");
}

hx::Val App_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"search") ) { return hx::Val( search ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"replace") ) { return hx::Val( replace ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"directory") ) { return hx::Val( directory ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getAllFiles") ) { return hx::Val( getAllFiles_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"searchAndReplaceInFile") ) { return hx::Val( searchAndReplaceInFile_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val App_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"search") ) { search=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"replace") ) { replace=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"directory") ) { directory=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void App_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("directory","\x6d","\xf2","\x44","\x10"));
	outFields->push(HX_HCSTRING("search","\x68","\x9f","\xf7","\x62"));
	outFields->push(HX_HCSTRING("replace","\x34","\x48","\x28","\xab"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo App_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(App_obj,directory),HX_HCSTRING("directory","\x6d","\xf2","\x44","\x10")},
	{hx::fsString,(int)offsetof(App_obj,search),HX_HCSTRING("search","\x68","\x9f","\xf7","\x62")},
	{hx::fsString,(int)offsetof(App_obj,replace),HX_HCSTRING("replace","\x34","\x48","\x28","\xab")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *App_obj_sStaticStorageInfo = 0;
#endif

static ::String App_obj_sMemberFields[] = {
	HX_HCSTRING("directory","\x6d","\xf2","\x44","\x10"),
	HX_HCSTRING("search","\x68","\x9f","\xf7","\x62"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("getAllFiles","\x4c","\x60","\x70","\x1f"),
	HX_HCSTRING("searchAndReplaceInFile","\x86","\x6e","\x11","\x38"),
	::String(null()) };

static void App_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(App_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void App_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(App_obj::__mClass,"__mClass");
};

#endif

hx::Class App_obj::__mClass;

void App_obj::__register()
{
	hx::Object *dummy = new App_obj;
	App_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.App","\xf7","\x6d","\x18","\x62");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = App_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(App_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< App_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = App_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = App_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = App_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
